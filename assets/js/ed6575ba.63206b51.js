"use strict";(self.webpackChunkweb3_feedback=self.webpackChunkweb3_feedback||[]).push([[9060],{9258:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>d,default:()=>p,frontMatter:()=>r,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"get-started/tooling/data-indexers/dipdup/quickstart","title":"Quickstart","description":"This page will guide you through the steps to get your first DipDup indexer up","source":"@site/docs/get-started/tooling/data-indexers/dipdup/quickstart.mdx","sourceDirName":"get-started/tooling/data-indexers/dipdup","slug":"/get-started/tooling/data-indexers/dipdup/quickstart","permalink":"/web3-feedback/get-started/tooling/data-indexers/dipdup/quickstart","draft":false,"unlisted":false,"editUrl":"https://github.com/Consensys/doc.linea/tree/main/docs/get-started/tooling/data-indexers/dipdup/quickstart.mdx","tags":[],"version":"current","lastUpdatedBy":"Joel Willmore","lastUpdatedAt":1744797916000,"sidebarPosition":2,"frontMatter":{"title":"Quickstart","sidebar_position":2,"image":"/img/socialCards/quickstart.jpg"},"sidebar":"getStartedSidebar","previous":{"title":"Overview","permalink":"/web3-feedback/get-started/tooling/data-indexers/dipdup/overview"},"next":{"title":"Dune","permalink":"/web3-feedback/get-started/tooling/data-indexers/dune"}}');var s=t(74848),a=t(28453);const r={title:"Quickstart",sidebar_position:2,image:"/img/socialCards/quickstart.jpg"},d=void 0,o={},l=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Step 1 \u2014 Install DipDup",id:"step-1--install-dipdup",level:2},{value:"Step 2 \u2014 Create a project",id:"step-2--create-a-project",level:2},{value:"Step 3 \u2014 Configuration file",id:"step-3--configuration-file",level:2},{value:"Step 4 \u2014 Define models and implement data handlers",id:"step-4--define-models-and-implement-data-handlers",level:2},{value:"Step 5 \u2014 Results",id:"step-5--results",level:2}];function c(e){const n={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"This page will guide you through the steps to get your first DipDup indexer up\nand running in a few minutes without getting too deep into the details."}),"\n",(0,s.jsx)(n.p,{children:"Let's create an indexer for output transactions from a specific address. We will\nneed to set up the indexing environment, configure the indexer, and store the\nresults in a database."}),"\n",(0,s.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,s.jsx)(n.p,{children:"Here are a few things you need to get started with DipDup:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Skills"}),": Basic Python 3 knowledge to implement data handlers."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Operating system"}),": You can use any Linux/macOS distribution on amd64/arm64\nplatforms with Python installed."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Python version"}),": Python 3.11 is required for DipDup. You can check your\nPython version by running ",(0,s.jsx)(n.code,{children:"python3 --version"})," in your terminal."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"step-1--install-dipdup",children:"Step 1 \u2014 Install DipDup"}),"\n",(0,s.jsxs)(n.p,{children:["The easiest way to install DipDup as a CLI application is\n",(0,s.jsx)(n.a,{href:"https://pipx.pypa.io/stable/",children:"pipx"})," with the command ",(0,s.jsx)(n.code,{children:"pipx install dipdup"}),". If\nyou don't want to deal with tooling, we have a convenient installer script. Run\nthe following command in your terminal:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"curl -Lsf https://dipdup.io/install.py | python3\n"})}),"\n",(0,s.jsxs)(n.p,{children:["See the ",(0,s.jsx)(n.a,{href:"https://dipdup.io/docs/installation",children:"installation"})," page for other\noptions."]}),"\n",(0,s.jsx)(n.h2,{id:"step-2--create-a-project",children:"Step 2 \u2014 Create a project"}),"\n",(0,s.jsx)(n.p,{children:"DipDup CLI has a built-in project generator with lots of templates. To create a\nnew project interactively, run the following command:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"dipdup new\n"})}),"\n",(0,s.jsxs)(n.p,{children:["For educational purposes, we'll create a project from scratch, so choose\n",(0,s.jsx)(n.code,{children:"[none]"})," network and ",(0,s.jsx)(n.code,{children:"demo_blank"})," template."]}),"\n",(0,s.jsx)(n.p,{children:"Follow the instructions; the project will be created in the new directory."}),"\n",(0,s.jsx)(n.h2,{id:"step-3--configuration-file",children:"Step 3 \u2014 Configuration file"}),"\n",(0,s.jsxs)(n.p,{children:["The project root directory contains a bash file named ",(0,s.jsx)(n.code,{children:"dipdup.bash"}),". It's the\nmain configuration file of your indexer. Available options are described in\ndetail on ",(0,s.jsx)(n.a,{href:"https://dipdup.io/docs/getting-started/config",children:"this page"}),". For now,\njust replace its content with the following:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"spec_version: 2.0\npackage: linea\n\ndatasources:\n  subsquid:\n    kind: evm.subsquid\n    url: https://v2.archive.subsquid.io/network/linea-mainnet\n    node: evm_node\n\n  etherscan:\n    kind: abi.etherscan\n    url: https://api.lineascan.build/api\n\n  mainnet_node:\n    kind: evm.node\n    url: https://linea-mainnet.infura.io/v3\n    ws_url: wss://linea-mainnet.infura.io/ws/v3\n\ncontracts:\n  some_contract:\n    kind: evm\n    address: 0xa219439258ca9da29e9cc4ce5596924745e12b93\n    typename: not_typed\n\nindexes:\n  evm_index:\n    kind: evm.subsquid.transactions\n    datasource: mainnet_node\n    handlers:\n      - callback: on_output_transaction\n        from: some_contract\n    last_level: 4631\n\n\ndatabase:\n  kind: sqlite\n  path: data/linea.sqlite\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Now it's time to generate directories and files required for the project:\ncallback stubs, types and other entities are defined in the configuration file\n",(0,s.jsx)(n.code,{children:"dipdup.bash"}),", so don't worry; in this guide we will only need a few. To\ngenerate the directories and files, run:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"dipdup init\n"})}),"\n",(0,s.jsxs)(n.p,{children:["You can read more about the structure of the DipDup package\n",(0,s.jsx)(n.a,{href:"https://dipdup.io/docs/getting-started/package",children:"here"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"step-4--define-models-and-implement-data-handlers",children:"Step 4 \u2014 Define models and implement data handlers"}),"\n",(0,s.jsx)(n.p,{children:"In this step, we define the business logic of our application. DipDup supports\nstoring data in SQLite, PostgreSQL and TimescaleDB databases. We use custom ORM\nbased on Tortoise ORM as an abstraction layer."}),"\n",(0,s.jsxs)(n.p,{children:["First, you need to define a model class. Our schema will consist of a single\n",(0,s.jsx)(n.code,{children:"Transaction"})," model:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"from dipdup import fields\nfrom dipdup.models import Model\n\n\nclass Transaction(Model):\n    hash = fields.TextField(pk=True)\n    block_number = fields.IntField()\n    from_ = fields.TextField()\n    to = fields.TextField(null=True)\n\n    created_at = fields.DatetimeField(auto_now_add=True)\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Our single handler will be responsible for processing output transactions as\ndescribed in the index definition in ",(0,s.jsx)(n.code,{children:"dipdup.bash"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"from dipdup.context import HandlerContext\nfrom dipdup.models.evm_node import EvmNodeTransactionData\nfrom dipdup.models.evm_subsquid import SubsquidTransactionData\n\nfrom linea import models as models\n\n\nasync def on_output_transaction(\n    ctx: HandlerContext,\n    transaction: SubsquidTransactionData | EvmNodeTransactionData,\n) -> None:\n    await models.Transaction(\n        hash=transaction.hash,\n        block_number=transaction.block_number,\n        from_=transaction.from_,\n        to=transaction.to,\n    ).save()\n"})}),"\n",(0,s.jsx)(n.h2,{id:"step-5--results",children:"Step 5 \u2014 Results"}),"\n",(0,s.jsx)(n.p,{children:"Time to run the indexer. Processed data will be written to the SQLite file\ndefined in the configuration:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"dipdup run\n"})}),"\n",(0,s.jsx)(n.p,{children:"DipDup will fetch all the historical data and switch to realtime mode. You can\ncheck the progress in the logs."}),"\n",(0,s.jsx)(n.p,{children:"Query the database to see the results:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"sqlite3 /tmp/linea.sqlite 'SELECT * FROM transaction LIMIT 10'\n"})})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>d});var i=t(96540);const s={},a=i.createContext(s);function r(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);