"use strict";(self.webpackChunkweb3_feedback=self.webpackChunkweb3_feedback||[]).push([[3389],{28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>c});var o=t(96540);const i={},a=o.createContext(i);function r(e){const n=o.useContext(a);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),o.createElement(a.Provider,{value:n},e.children)}},33245:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>c,default:()=>h,frontMatter:()=>r,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"get-started/how-to/connect-wallet","title":"Connect a wallet to your dapp","description":"Learn how to connect a wallet to your dapp so users can interact with your contracts","source":"@site/docs/get-started/how-to/connect-wallet.mdx","sourceDirName":"get-started/how-to","slug":"/get-started/how-to/connect-wallet","permalink":"/web3-feedback/get-started/how-to/connect-wallet","draft":false,"unlisted":false,"editUrl":"https://github.com/Consensys/doc.linea/tree/main/docs/get-started/how-to/connect-wallet.mdx","tags":[],"version":"current","lastUpdatedBy":"Joel Willmore","lastUpdatedAt":1746010636000,"frontMatter":{"title":"Connect a wallet to your dapp","description":"Learn how to connect a wallet to your dapp so users can interact with your contracts","image":"/img/socialCards/connect-a-wallet-to-your-dapp.jpg"},"sidebar":"getStartedSidebar","previous":{"title":"Migrate a dapp to Linea","permalink":"/web3-feedback/get-started/how-to/migrate-dapp"},"next":{"title":"Estimate transaction costs","permalink":"/web3-feedback/get-started/how-to/gas-fees"}}');var i=t(74848),a=t(28453);const r={title:"Connect a wallet to your dapp",description:"Learn how to connect a wallet to your dapp so users can interact with your contracts",image:"/img/socialCards/connect-a-wallet-to-your-dapp.jpg"},c=void 0,s={},d=[{value:"Wagmi",id:"wagmi",level:2},{value:"Wagmi configuration",id:"wagmi-configuration",level:3},{value:"Add Wagmi and query providers",id:"add-wagmi-and-query-providers",level:3},{value:"Add a wallet connection",id:"add-a-wallet-connection",level:3},{value:"Dynamic",id:"dynamic",level:2},{value:"Set up Dynamic dashboard",id:"set-up-dynamic-dashboard",level:3},{value:"Add the provider",id:"add-the-provider",level:3},{value:"Add the component",id:"add-the-component",level:3},{value:"Privy",id:"privy",level:2},{value:"Set up Privy dashboard",id:"set-up-privy-dashboard",level:3},{value:"Add the provider",id:"add-the-provider-1",level:3},{value:"Configure Linea",id:"configure-linea",level:3},{value:"Add the component",id:"add-the-component-1",level:3}];function l(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"Enabling users' wallets to connect to your dapp is critical, since it's the only way they can\nsend transactions and sign messages that enable them to interact with underlying smart contracts."}),"\n",(0,i.jsx)(n.p,{children:"In this guide, we'll go through several methods for connecting wallets to a React dapp."}),"\n",(0,i.jsx)(n.h2,{id:"wagmi",children:"Wagmi"}),"\n",(0,i.jsx)(n.p,{children:"Wagmi is a library of React hooks for developing dapps that interact with Ethereum-based blockchains\nlike Linea."}),"\n",(0,i.jsx)(n.p,{children:"To get started, install the packages:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"npm install wagmi viem@2.x @tanstack/react-query\n"})}),"\n",(0,i.jsx)(n.h3,{id:"wagmi-configuration",children:"Wagmi configuration"}),"\n",(0,i.jsxs)(n.p,{children:["Create a file named ",(0,i.jsx)(n.code,{children:"wagmi.ts"})," in your in your project directory, and add this code:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"import { http, createConfig } from 'wagmi'\nimport { linea, lineaSepolia, mainnet } from 'wagmi/chains'\nimport { injected } from 'wagmi/connectors'\n\nconst projectId = '<WALLETCONNECT_PROJECT_ID>'\n\nexport const config = createConfig({\n  chains: [lineaSepolia, linea, mainnet],\n  connectors: [injected()],\n  transports: {\n    [lineaSepolia.id]: http(),\n    [linea.id]: http(),\n    [mainnet.id]: http(),\n  },\n})\n"})}),"\n",(0,i.jsxs)(n.p,{children:["This configuration file ensures Wagmi works with Linea, Linea Sepolia, and Ethereum Mainnet, and\nalso defines that we should use the ",(0,i.jsx)(n.code,{children:"injected"})," wallet connector, which works with any wallet that\nuses the common EIP-1193 standard. There are a few wallets that also have ",(0,i.jsx)(n.a,{href:"https://wagmi.sh/react/api/connectors",children:"separate connectors"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"add-wagmi-and-query-providers",children:"Add Wagmi and query providers"}),"\n",(0,i.jsx)(n.p,{children:"Next, head to your app file."}),"\n",(0,i.jsxs)(n.p,{children:["Import the relevant providers from Wagmi and TanStack Query, as well as the ",(0,i.jsx)(n.code,{children:"QueryClient"}),"\nfunction we'll use:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"import { QueryClient, QueryClientProvider } from '@tanstack/react-query'\nimport { WagmiProvider } from 'wagmi'\nimport { config } from './wagmi' // path your wagmi.ts config file\n"})}),"\n",(0,i.jsx)(n.admonition,{title:"TanStack Query",type:"info",children:(0,i.jsx)(n.p,{children:"TanStack Query, formerly known as React Query, is a library that adds state management for the\nonchain data your dapp requests from the blockchain using Wagmi hooks. It's not essential, but\nrecommended."})}),"\n",(0,i.jsx)(n.p,{children:"Then add the following code, so that your dapp is wrapped within the Wagmi and TanStack Query\nproviders:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"'use client'\n\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query'\nimport { WagmiProvider } from 'wagmi'\nimport { config } from './wagmi'\n\nconst queryClient = new QueryClient()\n\nexport default function App() {\n  return (\n    <WagmiProvider config={config}>\n      <QueryClientProvider client={queryClient}>\n        <AppContent />\n      </QueryClientProvider>\n    </WagmiProvider>\n  );\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"add-a-wallet-connection",children:"Add a wallet connection"}),"\n",(0,i.jsxs)(n.p,{children:["There are several ways you could use Wagmi to connect wallets. The simplest is to create a wallet\nconnector component that uses the ",(0,i.jsx)(n.code,{children:"useConnect"})," hook."]}),"\n",(0,i.jsxs)(n.admonition,{title:"Multi-wallet discovery",type:"tip",children:[(0,i.jsx)(n.p,{children:"If you're up for the challenge, and particularly if you're creating a production dapp, we recommend\nyou set up your dapp to support EIP-6963, a standard that defines \"multi-wallet discovery\". In short,\nthis means that your dapp can detect the presence of multiple wallets on the user's device and give\nthem the choice of which wallet to connect."}),(0,i.jsxs)(n.p,{children:["To see how, follow a guide like ",(0,i.jsx)(n.a,{href:"https://hackmd.io/@VydelHxmR0CbKxAe4TjhbQ/BJ9Bf4XD6",children:"this one"})," or\n",(0,i.jsx)(n.a,{href:"https://metamask.io/news/developers/how-to-implement-eip-6963-support-in-your-web3-dapp/",children:"this one"}),"."]})]}),"\n",(0,i.jsxs)(n.p,{children:["To proceed with the simpler implementation, we'll create a new component, in a ",(0,i.jsx)(n.code,{children:"/components"}),"\ndirectory if you prefer, and add the below code. We'll call it ",(0,i.jsx)(n.code,{children:"ConnectButton.js"}),", but choose\nwhatever filename you like:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"import { useConnect } from 'wagmi'\nimport { injected } from 'wagmi/connectors'\n\nexport function ConnectButton() {\n  const { connect } = useConnect()\n\n  return (\n    <button onClick={() => connect({ connector: injected() })}>\n      Connect wallet\n    </button>\n  )\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"useConnect"})," hook is the main object of note here."]}),"\n",(0,i.jsx)(n.p,{children:"Now that we've defined the component, we can import and insert it into the dapp:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"import { QueryClient, QueryClientProvider } from '@tanstack/react-query'\nimport { WagmiProvider } from 'wagmi'\nimport { config } from './wagmi'\nimport { ConnectButton } from '../components/ConnectButton'\n\nconst queryClient = new QueryClient()\n\nexport default function App() {\n  return (\n    <WagmiProvider config={config}>\n      <QueryClientProvider client={queryClient}>\n        <ConnectButton />\n      </QueryClientProvider>\n    </WagmiProvider>\n  );\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Now if you run ",(0,i.jsx)(n.code,{children:"npm run dev"}),", you should be able to connect your wallet, such as MetaMask, on\nLinea, Linea Sepolia, or Ethereum Mainnet."]}),"\n",(0,i.jsxs)(n.p,{children:["Note that this is a very basic implementation, with no CSS styling and missing a few other necessary\nfeatures, such as displaying the connected wallet's address (",(0,i.jsx)(n.a,{href:"https://wagmi.sh/react/api/hooks/useAccount#address",children:"useAccount"}),"),\n",(0,i.jsx)(n.a,{href:"https://wagmi.sh/react/api/hooks/useConnections",children:"connection status"}),", and a ",(0,i.jsx)(n.a,{href:"https://wagmi.sh/react/api/hooks/useDisconnect",children:"disconnect button"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"dynamic",children:"Dynamic"}),"\n",(0,i.jsx)(n.p,{children:"Install the Dynamic SDK and the Ethereum connectors:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"npm install @dynamic-labs/sdk-react-core @dynamic-labs/ethereum\n"})}),"\n",(0,i.jsx)(n.p,{children:"The latter contains wallet connectors for all chains compatible with the Ethereum Virtual Machine\n(EVM), Linea included."}),"\n",(0,i.jsx)(n.h3,{id:"set-up-dynamic-dashboard",children:"Set up Dynamic dashboard"}),"\n",(0,i.jsxs)(n.p,{children:["To properly configure the Dynamic component we're about to use, you need to sign up for Dynamic to\naccess the ",(0,i.jsx)(n.a,{href:"https://app.dynamic.xyz/",children:"Dynamic dashboard"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"Once you're in the dashboard, you need to:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["Enable Linea (and Linea Sepolia, if you need it). ",(0,i.jsx)(n.a,{href:"https://docs.dynamic.xyz/chains/enabling-chains",children:"See the guide to configuring your chains"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["Get the ",(0,i.jsx)(n.code,{children:"environmentId"})," from Developers > SDK & API Keys."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"add-the-provider",children:"Add the provider"}),"\n",(0,i.jsx)(n.p,{children:"To set up the dapp to work with the Dynamic wallet connector button, we need to:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Wrap dapp contents in the ",(0,i.jsx)(n.code,{children:"DynamicContextProvider"})," component."]}),"\n",(0,i.jsxs)(n.li,{children:["Import the Dynamic Ethereum wallet connectors and pass these to the ",(0,i.jsx)(n.code,{children:"DynamicContextProvider"})," in\nits ",(0,i.jsx)(n.code,{children:"settings"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Then, paste the following code into your dapp:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:'import { DynamicContextProvider } from "@dynamic-labs/sdk-react-core";\nimport { EthereumWalletConnectors } from "@dynamic-labs/ethereum";\n\nexport default function App() {\n  return (\n    <DynamicContextProvider\n        settings={{\n            environmentId: "YOUR_ENVIRONMENT_ID",\n            walletConnectors: [EthereumWalletConnectors]\n        }}\n    >\n      <AppContent />\n    </DynamicContextProvider>\n  );\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Replace ",(0,i.jsx)(n.code,{children:"YOUR_ENVIRONMENT_ID"})," with the ",(0,i.jsx)(n.code,{children:"environmentId"})," with your own. This enables Dynamic to pull\nyour configured chains and any other preferences you set up in the dashboard."]}),"\n",(0,i.jsxs)(n.admonition,{type:"note",children:[(0,i.jsxs)(n.p,{children:["If you intend to use Wagmi in your project, you also need to add a ",(0,i.jsx)(n.a,{href:"https://docs.dynamic.xyz/react-sdk/providers/dynamicwagmiconnector",children:(0,i.jsx)(n.code,{children:"DynamicWagmiProvider"})}),"\ncomponent and wrap it with ",(0,i.jsx)(n.a,{href:"https://wagmi.sh/react/api/WagmiProvider",children:(0,i.jsx)(n.code,{children:"WagmiProvider"})}),", like this:"]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"<DynamicContextProvider>\n    <WagmiProvider>\n        <DynamicWagmiProvider>\n            <AppContent />\n        </DynamicWagmiProvider>\n    </WagmiProvider>\n</DynamicContextProvider>\n"})})]}),"\n",(0,i.jsx)(n.h3,{id:"add-the-component",children:"Add the component"}),"\n",(0,i.jsxs)(n.p,{children:["Next, ",(0,i.jsx)(n.a,{href:"https://docs.dynamic.xyz/react-sdk/components/components-introduction",children:"select a wallet component"}),".\nFor example, you can use the ",(0,i.jsx)(n.code,{children:"DynamicWidget"})," component if you want a wallet connector button that\nyou can configure to use various user onboarding methods such as email, phone number, or even\nembedded wallets."]}),"\n",(0,i.jsxs)(n.p,{children:["For simplicity, let's go with ",(0,i.jsx)(n.a,{href:"https://docs.dynamic.xyz/react-sdk/components/dynamicconnectbutton",children:(0,i.jsx)(n.code,{children:"DynamicConnectButton"})}),",\nwhich is a classic wallet connection button for connecting external wallets."]}),"\n",(0,i.jsx)(n.p,{children:"Add it to your import statement:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:'import { DynamicContextProvider, DynamicConnectButton } from "@dynamic-labs/sdk-react-core";\n'})}),"\n",(0,i.jsx)(n.p,{children:"Then slot it into your dapp, adding some text:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:'import { DynamicContextProvider, DynamicConnectButton } from "@dynamic-labs/sdk-react-core";\nimport { EthereumWalletConnectors } from "@dynamic-labs/ethereum";\n\nexport default function App() {\n  return (\n    <DynamicContextProvider\n        settings={{\n            environmentId: "7cc1f95f-6015-4f0b-888d-e52178b1b27d",\n                walletConnectors: [EthereumWalletConnectors]\n        }}\n    >\n       <DynamicConnectButton>\n          Connect wallet\n       </DynamicConnectButton>\n    </DynamicContextProvider>\n  );\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"Now, run your dapp locally and click the button to test your work:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"npm run dev\n"})}),"\n",(0,i.jsx)(n.p,{children:"You should be able to connect to Linea and Linea Sepolia."}),"\n",(0,i.jsx)(n.h2,{id:"privy",children:"Privy"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"https://docs.privy.io/",children:"Privy"})," provides multiple SDKs for building dapps. Their ",(0,i.jsx)(n.a,{href:"https://docs.privy.io/guide/react/",children:"React SDK"}),"\nis an easy way to get a flexible, configurable wallet connection component into your dapp."]}),"\n",(0,i.jsx)(n.p,{children:"Install the Privy SDK with this command:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"npm install @privy-io/react-auth@latest\n"})}),"\n",(0,i.jsx)(n.h3,{id:"set-up-privy-dashboard",children:"Set up Privy dashboard"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"https://dashboard.privy.io/",children:"Sign up for Privy"})," to access the dashboard."]}),"\n",(0,i.jsx)(n.p,{children:"Go to Login Methods in the sidebar to configure login methods for your dapp, and make sure that\nexternal wallets are enabled. Optionally, feel free to toggle any other methods you want to use."}),"\n",(0,i.jsx)(n.p,{children:"Now go to App Settings and get your App ID. We'll need to add this to the dapp code to ensure Privy\nfunctions correctly."}),"\n",(0,i.jsx)(n.h3,{id:"add-the-provider-1",children:"Add the provider"}),"\n",(0,i.jsx)(n.p,{children:"Now we need to import the Privy provider to the dapp and then use it to wrap the dapp contents:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"'use client'\n\nimport { PrivyProvider } from '@privy-io/react-auth';\n\nexport default function App() {\n  return (\n    <PrivyProvider\n    appId=\"your-privy-app-id\" // add your App ID here\n    config={{\n      appearance: {\n        theme: 'dark',\n      },\n    }}\n  >\n      <AppContent />\n    </PrivyProvider>\n  );\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsxs)(n.a,{href:"https://docs.privy.io/guide/react/configuration/appearance",children:[(0,i.jsx)(n.code,{children:"appearance"})," configuration"]})," is\noptional."]}),"\n",(0,i.jsx)(n.h3,{id:"configure-linea",children:"Configure Linea"}),"\n",(0,i.jsx)(n.p,{children:"To enable Privy to use Linea, we need to import it from Viem. First, install Viem with this command:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"npm install viem\n"})}),"\n",(0,i.jsx)(n.p,{children:"And then add this import statement to your dapp:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"import { linea, lineaSepolia } from 'viem/chains'\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Now we need to add the Linea chains to the ",(0,i.jsx)(n.code,{children:"PrivyProvider"})," ",(0,i.jsx)(n.code,{children:"config"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"'use client'\n\nimport { PrivyProvider } from '@privy-io/react-auth';\nimport { linea, lineaSepolia } from 'viem/chains'\n\nexport default function App() {\n  return (\n    <PrivyProvider\n    appId=\"cm4tv4knx03yv4baen04ozlhv\"\n    config={{\n      appearance: {\n        theme: 'dark',\n      },\n      defaultChain: linea,\n      supportedChains: [linea, lineaSepolia],\n    }}\n  >\n      <AppContent />\n    </PrivyProvider>\n  );\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["We've chosen Linea Mainnet as the ",(0,i.jsx)(n.code,{children:"defaultChain"}),", but you can set this with Linea Sepolia instead,\nif you prefer."]}),"\n",(0,i.jsx)(n.h3,{id:"add-the-component-1",children:"Add the component"}),"\n",(0,i.jsxs)(n.p,{children:["To implement the wallet connection button, we'll create a new component that uses the ",(0,i.jsx)(n.code,{children:"usePrivy"}),"\nhook, which enables you to trigger the Privy login modal to appear."]}),"\n",(0,i.jsxs)(n.p,{children:["Create a new file named ",(0,i.jsx)(n.code,{children:"ConnectButton.js"})," in your ",(0,i.jsx)(n.code,{children:"/components"})," directory, and add the following\ncode:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"import { usePrivy } from '@privy-io/react-auth';\n\nfunction ConnectButton() {\n  const { login } = usePrivy();\n\n  return (\n    <button onClick={login}>\n      Connect wallet\n    </button>\n  );\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"Now we can import the component and insert it into the dapp. Ensure your dapp reflects this code:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"'use client'\n\nimport { PrivyProvider } from '@privy-io/react-auth';\nimport { linea, lineaSepolia } from 'viem/chains'\nimport { ConnectButton } from '../components/ConnectButton';\n\nexport default function App() {\n  return (\n    <PrivyProvider\n    appId=\"cm4tv4knx03yv4baen04ozlhv\"\n    config={{\n      appearance: {\n        theme: 'dark',\n      },\n      defaultChain: linea,\n      supportedChains: [linea, lineaSepolia],\n    }}\n  >\n      <ConnectButton />\n    </PrivyProvider>\n  );\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Now if you run your dapp with ",(0,i.jsx)(n.code,{children:"npm run dev"}),", the Privy modal will appear when you click the button."]})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}}}]);