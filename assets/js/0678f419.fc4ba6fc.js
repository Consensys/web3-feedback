"use strict";(self.webpackChunkweb3_feedback=self.webpackChunkweb3_feedback||[]).push([[716],{11640:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>m,contentTitle:()=>u,default:()=>v,frontMatter:()=>h,metadata:()=>t,toc:()=>g});const t=JSON.parse('{"id":"technology/message-service","title":"Canonical message service","description":"<img","source":"@site/docs/technology/message-service.mdx","sourceDirName":"technology","slug":"/technology/message-service","permalink":"/web3-feedback/technology/message-service","draft":false,"unlisted":false,"editUrl":"https://github.com/Consensys/doc.linea/tree/main/docs/technology/message-service.mdx","tags":[],"version":"current","lastUpdatedBy":"Joel Willmore","lastUpdatedAt":1746010636000,"frontMatter":{"title":"Canonical message service","image":"/img/socialCards/canonical-message-service.jpg"},"sidebar":"technologySidebar","previous":{"title":"Canonical token bridge","permalink":"/web3-feedback/technology/canonical-token-bridge"},"next":{"title":"Coordinator","permalink":"/web3-feedback/technology/coordinator"}}');var a=s(74848),r=s(28453),i=s(58069);const o="pragma solidity ^0.8.19;\n\ninterface IMessageService {\n  /**\n   * @dev Emitted when a message is sent.\n   * @dev We include the message hash to save hashing costs on the rollup.\n   */\n  event MessageSent(\n    address indexed _from,\n    address indexed _to,\n    uint256 _fee,\n    uint256 _value,\n    uint256 _nonce,\n    bytes _calldata,\n    bytes32 indexed _messageHash\n  );\n\n  /**\n   * @dev Emitted when a message is claimed.\n   */\n  event MessageClaimed(bytes32 indexed _messageHash);\n\n  /**\n   * @dev Thrown when fees are lower than the minimum fee.\n   */\n  error FeeTooLow();\n\n  /**\n   * @dev Thrown when fees are lower than value.\n   */\n  error ValueShouldBeGreaterThanFee();\n\n  /**\n   * @dev Thrown when the value sent is less than the fee.\n   * @dev Value to forward on is msg.value - _fee.\n   */\n  error ValueSentTooLow();\n\n  /**\n   * @dev Thrown when the destination address reverts.\n   */\n  error MessageSendingFailed(address destination);\n\n  /**\n   * @dev Thrown when the destination address reverts.\n   */\n  error FeePaymentFailed(address recipient);\n\n  /**\n   * @notice Sends a message for transporting from the given chain.\n   * @dev This function should be called with a msg.value = _value + _fee. The fee will be paid on the destination chain.\n   * @param _to The destination address on the destination chain.\n   * @param _fee The message service fee on the origin chain.\n   * @param _calldata The calldata used by the destination message service to call the destination contract.\n   */\n  function sendMessage(address _to, uint256 _fee, bytes calldata _calldata) external payable;\n\n  /**\n   * @notice Deliver a message to the destination chain.\n   * @notice Is called automatically by the Postman, dApp or end user.\n   * @param _from The msg.sender calling the origin message service.\n   * @param _to The destination address on the destination chain.\n   * @param _value The value to be transferred to the destination address.\n   * @param _fee The message service fee on the origin chain.\n   * @param _feeRecipient Address that will receive the fees.\n   * @param _calldata The calldata used by the destination message service to call/forward to the destination contract.\n   * @param _nonce Unique message number.\n   */\n  function claimMessage(\n    address _from,\n    address _to,\n    uint256 _fee,\n    uint256 _value,\n    address payable _feeRecipient,\n    bytes calldata _calldata,\n    uint256 _nonce\n  ) external;\n\n  /**\n   * @notice Returns the original sender of the message on the origin layer.\n   * @return The original sender of the message on the origin layer.\n   */\n  function sender() external view returns (address);\n}",l='// SPDX-License-Identifier: OWNED BY Consensys Software Inc.\npragma solidity ^0.8.19;\n\nimport "./interfaces/IMessageService.sol";\n\n/**\n * @title Base contract to manage cross-chain messaging.\n * @author Consensys Software Inc.\n */\nabstract contract MessageServiceBase {\n  IMessageService public messageService;\n  address public remoteSender;\n\n  uint256[10] private __base_gap;\n\n  /**\n   * @dev Thrown when the caller address is not the message service address\n   */\n  error CallerIsNotMessageService();\n\n  /**\n   * @dev Thrown when remote sender address is not authorized.\n   */\n  error SenderNotAuthorized();\n\n  /**\n   * @dev Thrown when an address is the default zero address.\n   */\n  error ZeroAddressNotAllowed();\n\n  /**\n   * @dev Modifier to make sure the caller is the known message service.\n   *\n   * Requirements:\n   *\n   * - The msg.sender must be the message service.\n   */\n  modifier onlyMessagingService() {\n    if (msg.sender != address(messageService)) {\n      revert CallerIsNotMessageService();\n    }\n    _;\n  }\n\n  /**\n   * @dev Modifier to make sure the original sender is allowed.\n   *\n   * Requirements:\n   *\n   * - The original message sender via the message service must be a known sender.\n   */\n  modifier onlyAuthorizedRemoteSender() {\n    if (messageService.sender() != remoteSender) {\n      revert SenderNotAuthorized();\n    }\n    _;\n  }\n\n  /**\n   * @notice Initializes the message service and remote sender address\n   * @dev Must be initialized in the initialize function of the main contract or constructor\n   * @param _messageService The message service address, cannot be empty.\n   * @param _remoteSender The authorized remote sender address, cannot be empty.\n   **/\n  function _init_MessageServiceBase(address _messageService, address _remoteSender) internal {\n    if (_messageService == address(0)) {\n      revert ZeroAddressNotAllowed();\n    }\n\n    if (_remoteSender == address(0)) {\n      revert ZeroAddressNotAllowed();\n    }\n\n    messageService = IMessageService(_messageService);\n    remoteSender = _remoteSender;\n  }\n}';var c=s(65537),d=s(79329);const h={title:"Canonical message service",image:"/img/socialCards/canonical-message-service.jpg"},u=void 0,m={},g=[{value:"What is it?",id:"what-is-it",level:2},{value:"What does it do?",id:"what-does-it-do",level:2},{value:"How does it do it?",id:"how-does-it-do-it",level:2},{value:"Technical reference",id:"technical-reference",level:2},{value:"Message service contracts",id:"message-service-contracts",level:3},{value:"How to use",id:"how-to-use",level:3},{value:"Workflow",id:"workflow",level:4},{value:"Interface IMessageService.sol",id:"interface-imessageservicesol",level:3},{value:"Abstract contract MessageServiceBase.sol",id:"abstract-contract-messageservicebasesol",level:3}];function f(e){const n={a:"a",admonition:"admonition",br:"br",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",li:"li",mdxAdmonitionTitle:"mdxAdmonitionTitle",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,r.R)(),...e.components},{Details:s}=n;return s||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)("div",{class:"center-container",children:(0,a.jsx)("div",{class:"img-large",children:(0,a.jsx)("img",{src:"/img/get_started/concepts/message_service/Linea_message_service_2.png",alt:"Linea message service architecture"})})}),"\n",(0,a.jsx)(n.h2,{id:"what-is-it",children:"What is it?"}),"\n",(0,a.jsx)(n.p,{children:'The canonical message service is a combination of smart contracts and other protocols which work together to pass "arbitrary messages"--that is, user-specified data--between Linea and other networks.'}),"\n",(0,a.jsx)(n.h2,{id:"what-does-it-do",children:"What does it do?"}),"\n",(0,a.jsx)(n.p,{children:"If you've ever used a bridge between two blockchains, you may be used to what feels like a fairly restrictive experience; you can only send certain tokens, for example. The canonical message service itself isn't like an end-user bridge interface. It's a system through which data and assets can be permissionlessly and reliably transferred from one blockchain to another. The Service, as a whole, receives requests to move something from one network to the other, and then carries that request out, delivering the message as submitted to an established smart contract on the destination network."}),"\n",(0,a.jsx)(n.p,{children:"One of the most important things that the Message Service transfers is information about the current state of the Ethereum network, from Ethereum to Linea, and in return, an updated Merkle tree and a zk-proof from Linea to Ethereum, every time Linea reports back about activity on the network. In other words, the canonical message service transmits the rollup data."}),"\n",(0,a.jsx)(n.p,{children:"However, the Service is not limited or restricted to use by Linea's core functionality. It is general-purpose, public infrastructure which can be used by developers, integrated into dapps, and triggered by end users."}),"\n",(0,a.jsx)("div",{class:"center-container",children:(0,a.jsx)("div",{class:"img-large",children:(0,a.jsx)("img",{src:"/img/get_started/concepts/message_service/Linea_bridge_architecture.png",alt:"Linea bridge architecture"})})}),"\n",(0,a.jsx)(n.h2,{id:"how-does-it-do-it",children:"How does it do it?"}),"\n",(0,a.jsxs)(n.p,{children:["The canonical message service consists of three main elements: two smart contracts, and the Postbots service in between. As you may have guessed already, the smart contracts are ",(0,a.jsx)(n.a,{href:"/web3-feedback/technology/message-service#message-service-contracts",children:"on Linea and Ethereum"}),", and are almost exactly the same. They allow for ETH to be minted on the target network, for example, though they are not limited to that."]}),"\n",(0,a.jsx)(n.p,{children:"A user initiates a network-to-network transfer by executing a call on one of the contract's methods--that is, invoking a function built into the smart contract. The user could do this on their own, if they have the knowledge of how to interact with a smart contract directly, or they could do so through a frontend. If properly formulated, the smart contract will accept the request from the user, and pass it off to the Postbots."}),"\n",(0,a.jsx)(n.p,{children:'The Postbots (sometimes referred to as postmen) are one part of Linea that are currently centralized, but will be decentralized. The Postbots are essentially actors that "listen" for calls being made to one of the contracts, either on Linea or Ethereum, and pass the information submitted to the other network.'}),"\n",(0,a.jsxs)(n.p,{children:["Once the information is delivered to the destination smart contract, the code contained in the request is executed. If the message being transferred carried orders to mint tokens, users can either choose to manually ",(0,a.jsx)(n.em,{children:"pull"})," the transferred assets out of the destination end of the bridge, or pay up-front and allow the assets to be ",(0,a.jsx)(n.em,{children:"pushed"})," directly to the destination address."]}),"\n",(0,a.jsx)(n.p,{children:"There's an additional layer of logic, though, which serves to ensure that the message delivered to the L2 is valid. Essentially, a message is sent from Ethereum, relayed through the Message Service, and is delivered to the Linea smart contract. That smart contract checks the message received against the list of messages sent on the Ethereum side, verifies that it exists on the L1, and only then accepts it as a valid message:"}),"\n",(0,a.jsx)("div",{class:"center-container",children:(0,a.jsx)("div",{class:"img-large",children:(0,a.jsx)("img",{src:"/img/get_started/concepts/message_service/Linea_message_service_1.png",alt:"Linea message service verification"})})}),"\n",(0,a.jsx)(n.h2,{id:"technical-reference",children:"Technical reference"}),"\n",(0,a.jsx)(n.p,{children:"The message service is responsible for cross-chain messages between Ethereum and Linea, which:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Allows a contract on the source chain to safely interact with a contract on the target chain\n(e.g. L1TokenBridge triggering mint on the L2TokenBridge),"}),"\n",(0,a.jsx)(n.li,{children:"Is responsible for bridging ETH (native currency on L1 and L2)"}),"\n",(0,a.jsxs)(n.li,{children:["Supports:","\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"push"}),": auto-execution on target layer if a fee is paid"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"pull"}),": users / protocols responsible for triggering the transaction"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"message-service-contracts",children:"Message service contracts"}),"\n",(0,a.jsxs)(c.A,{groupId:"Mainnet-Testnet",className:"my-tabs",children:[(0,a.jsx)(d.A,{value:"Mainnet",label:"Mainnet",default:!0,children:(0,a.jsx)("table",{children:(0,a.jsxs)("tbody",{children:[(0,a.jsxs)("tr",{children:[(0,a.jsx)("th",{children:"L1 (Ethereum) Address"}),(0,a.jsx)("th",{children:"L2 (Linea) Address"})]}),(0,a.jsxs)("tr",{children:[(0,a.jsx)("td",{children:(0,a.jsx)("a",{href:"https://etherscan.io/address/0xd19d4B5d358258f05D7B411E21A1460D11B0876F",children:(0,a.jsx)(n.p,{children:"0xd19d4B5d358258f05D7B411E21A1460D11B0876F"})})}),(0,a.jsx)("td",{children:(0,a.jsx)("a",{href:"https://lineascan.build/address/0x508Ca82Df566dCD1B0DE8296e70a96332cD644ec",children:(0,a.jsx)(n.p,{children:"0x508Ca82Df566dCD1B0DE8296e70a96332cD644ec"})})})]})]})})}),(0,a.jsx)(d.A,{value:"Linea Sepolia",label:"Linea Sepolia",children:(0,a.jsx)("table",{children:(0,a.jsxs)("tbody",{children:[(0,a.jsxs)("tr",{children:[(0,a.jsx)("th",{children:"L1 (Sepolia) Address"}),(0,a.jsx)("th",{children:"L2 (Linea Sepolia) Address"})]}),(0,a.jsxs)("tr",{children:[(0,a.jsx)("td",{children:(0,a.jsx)("a",{href:"https://sepolia.etherscan.io/address/0xB218f8A4Bc926cF1cA7b3423c154a0D627Bdb7E5",children:(0,a.jsx)(n.p,{children:"0xB218f8A4Bc926cF1cA7b3423c154a0D627Bdb7E5"})})}),(0,a.jsx)("td",{children:(0,a.jsx)("a",{href:"https://sepolia.lineascan.build/address/0x971e727e956690b9957be6d51ec16e73acac83a7",children:(0,a.jsx)(n.p,{children:"0x971e727e956690b9957be6d51Ec16E73AcAC83A7"})})})]})]})})})]}),"\n",(0,a.jsx)(n.h3,{id:"how-to-use",children:"How to use"}),"\n",(0,a.jsx)(n.h4,{id:"workflow",children:"Workflow"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:["Dapp calls ",(0,a.jsx)(n.code,{children:"sendMessage(...)"})," on the origin layer using the proxy contract at one of the testnet\naddresses above.","\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Args:","\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"_to"}),": the destination address on the destination chain"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"_fee"}),": the message service fee on the origin chain","\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["An optional field used to incentivize a Postman to perform ",(0,a.jsx)(n.code,{children:"claimMessage(...)"})," automatically\non the destination chain (not available when bridging from L2 to L1, or for non-ETH transfers)"]}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"_calldata"}),": a flexible field that is generally created using ",(0,a.jsx)(n.code,{children:"abi.encode(...)"})]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.admonition,{type:"info",children:[(0,a.jsxs)(n.mdxAdmonitionTitle,{children:["Calculating ",(0,a.jsx)(n.code,{children:"_fee"})]}),(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["L1 -> L2:","\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Automatic claiming: Postman fee = ",(0,a.jsx)(n.code,{children:"target layer gas price * (gas estimated + gas limit surplus) * margin"}),", where:","\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"target layer gas price"})," = ",(0,a.jsx)(n.code,{children:"eth_gasPrice"})," on the target layer"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"gas estimated"})," = 100,000"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"gas limit surplus"})," = 6000"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"margin"})," = 2"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.li,{children:"Manual claiming: 0"}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["L2 -> L1:","\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Manual claiming: Anti-DDOS fee = ",(0,a.jsx)(n.code,{children:"0.001 ETH"})]}),"\n"]}),"\n"]}),"\n"]}),(0,a.jsxs)(n.p,{children:["See our ",(0,a.jsx)(n.a,{href:"/web3-feedback/get-started/how-to/bridge/",children:"main bridge page"})," for more information on the\nexecution fees that apply."]})]}),"\n",(0,a.jsxs)(n.ol,{start:"2",children:["\n",(0,a.jsxs)(n.li,{children:["Dapp uses the ",(0,a.jsx)(n.a,{href:"https://www.npmjs.com/package/@consensys/linea-sdk?activeTab=readme",children:"Postman SDK"}),"\nto simplify the execution of messages on the destination layer by:","\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Triggering the delivery","\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["If messages don't get delivered by the postman, the message can be manually claimed by\ncalling, with the parameters detailed in the ",(0,a.jsx)(n.a,{href:"#interface-imessageservicesol",children:"interface below"}),",\none of:"]}),"\n",(0,a.jsxs)(n.li,{children:["L2: ",(0,a.jsx)(n.code,{children:"claimMessage"})]}),"\n",(0,a.jsxs)(n.li,{children:["L1: ",(0,a.jsx)(n.code,{children:"claimMessageWithProof"}),(0,a.jsx)(n.br,{}),"\n","You can also use the SDK to claim messages."]}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["Receiving the delivery in the dapp smart contract","\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["This triggers ",(0,a.jsx)(n.code,{children:"claimMessage(...)"})," on the destination layer that will call ",(0,a.jsx)(n.code,{children:"_to"})," with\n",(0,a.jsx)(n.code,{children:"_calldata"})," and a value equal to."]}),"\n",(0,a.jsxs)(n.li,{children:["The dapp smart contract can inherit from ",(0,a.jsx)(n.code,{children:"MessageServiceBase.sol"})," to:","\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Verify that the call comes from the MessageService ",(0,a.jsx)(n.code,{children:"onlyMessagingService"})]}),"\n",(0,a.jsxs)(n.li,{children:["Verify that the sender on the origin chain comes from a trusted contract (usually the dapp\nsibling contract) using ",(0,a.jsx)(n.code,{children:"onlyAuthorizedRemoteSender()"})]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.admonition,{title:"Proxy contract",type:"info",children:(0,a.jsx)(n.p,{children:'A proxy contract is one that simply points towards the actual "implementation" contracts. This model\nis beneficial as it allows the implementation contracts to be upgraded independently of the proxy,\nallowing contract upgrades without having to start afresh and lose the proxy contract\'s history.\nWhen the implementation contracts are updated, the proxy contract is simply amended to point\ntowards the new implementation contract addresses.'})}),"\n",(0,a.jsx)(n.h3,{id:"interface-imessageservicesol",children:"Interface IMessageService.sol"}),"\n",(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"IMessageService.sol"}),(0,a.jsx)(i.A,{language:"solidity",children:o})]}),"\n",(0,a.jsx)(n.h3,{id:"abstract-contract-messageservicebasesol",children:"Abstract contract MessageServiceBase.sol"}),"\n",(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"MessageServiceBase.sol"}),(0,a.jsx)(i.A,{language:"solidity",children:l})]})]})}function v(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(f,{...e})}):f(e)}},65537:(e,n,s)=>{s.d(n,{A:()=>w});var t=s(96540),a=s(34164),r=s(65627),i=s(56347),o=s(50372),l=s(30604),c=s(11861),d=s(78749);function h(e){return t.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,t.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function u(e){const{values:n,children:s}=e;return(0,t.useMemo)((()=>{const e=n??function(e){return h(e).map((e=>{let{props:{value:n,label:s,attributes:t,default:a}}=e;return{value:n,label:s,attributes:t,default:a}}))}(s);return function(e){const n=(0,c.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,s])}function m(e){let{value:n,tabValues:s}=e;return s.some((e=>e.value===n))}function g(e){let{queryString:n=!1,groupId:s}=e;const a=(0,i.W6)(),r=function(e){let{queryString:n=!1,groupId:s}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!s)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return s??null}({queryString:n,groupId:s});return[(0,l.aZ)(r),(0,t.useCallback)((e=>{if(!r)return;const n=new URLSearchParams(a.location.search);n.set(r,e),a.replace({...a.location,search:n.toString()})}),[r,a])]}function f(e){const{defaultValue:n,queryString:s=!1,groupId:a}=e,r=u(e),[i,l]=(0,t.useState)((()=>function(e){let{defaultValue:n,tabValues:s}=e;if(0===s.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!m({value:n,tabValues:s}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${s.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const t=s.find((e=>e.default))??s[0];if(!t)throw new Error("Unexpected error: 0 tabValues");return t.value}({defaultValue:n,tabValues:r}))),[c,h]=g({queryString:s,groupId:a}),[f,v]=function(e){let{groupId:n}=e;const s=function(e){return e?`docusaurus.tab.${e}`:null}(n),[a,r]=(0,d.Dv)(s);return[a,(0,t.useCallback)((e=>{s&&r.set(e)}),[s,r])]}({groupId:a}),p=(()=>{const e=c??f;return m({value:e,tabValues:r})?e:null})();(0,o.A)((()=>{p&&l(p)}),[p]);return{selectedValue:i,selectValue:(0,t.useCallback)((e=>{if(!m({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);l(e),h(e),v(e)}),[h,v,r]),tabValues:r}}var v=s(9136);const p={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var x=s(74848);function b(e){let{className:n,block:s,selectedValue:t,selectValue:i,tabValues:o}=e;const l=[],{blockElementScrollPositionUntilNextRender:c}=(0,r.a_)(),d=e=>{const n=e.currentTarget,s=l.indexOf(n),a=o[s].value;a!==t&&(c(n),i(a))},h=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const s=l.indexOf(e.currentTarget)+1;n=l[s]??l[0];break}case"ArrowLeft":{const s=l.indexOf(e.currentTarget)-1;n=l[s]??l[l.length-1];break}}n?.focus()};return(0,x.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.A)("tabs",{"tabs--block":s},n),children:o.map((e=>{let{value:n,label:s,attributes:r}=e;return(0,x.jsx)("li",{role:"tab",tabIndex:t===n?0:-1,"aria-selected":t===n,ref:e=>{l.push(e)},onKeyDown:h,onClick:d,...r,className:(0,a.A)("tabs__item",p.tabItem,r?.className,{"tabs__item--active":t===n}),children:s??n},n)}))})}function j(e){let{lazy:n,children:s,selectedValue:r}=e;const i=(Array.isArray(s)?s:[s]).filter(Boolean);if(n){const e=i.find((e=>e.props.value===r));return e?(0,t.cloneElement)(e,{className:(0,a.A)("margin-top--md",e.props.className)}):null}return(0,x.jsx)("div",{className:"margin-top--md",children:i.map(((e,n)=>(0,t.cloneElement)(e,{key:n,hidden:e.props.value!==r})))})}function y(e){const n=f(e);return(0,x.jsxs)("div",{className:(0,a.A)("tabs-container",p.tabList),children:[(0,x.jsx)(b,{...n,...e}),(0,x.jsx)(j,{...n,...e})]})}function w(e){const n=(0,v.A)();return(0,x.jsx)(y,{...e,children:h(e.children)},String(n))}},79329:(e,n,s)=>{s.d(n,{A:()=>i});s(96540);var t=s(34164);const a={tabItem:"tabItem_Ymn6"};var r=s(74848);function i(e){let{children:n,hidden:s,className:i}=e;return(0,r.jsx)("div",{role:"tabpanel",className:(0,t.A)(a.tabItem,i),hidden:s,children:n})}}}]);