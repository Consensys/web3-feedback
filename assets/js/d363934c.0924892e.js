"use strict";(self.webpackChunkweb3_feedback=self.webpackChunkweb3_feedback||[]).push([[2714],{28453:(e,s,i)=>{i.d(s,{R:()=>a,x:()=>l});var r=i(96540);const t={},n=r.createContext(t);function a(e){const s=r.useContext(n);return r.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function l(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),r.createElement(n.Provider,{value:s},e.children)}},94669:(e,s,i)=>{i.r(s),i.d(s,{assets:()=>d,contentTitle:()=>l,default:()=>h,frontMatter:()=>a,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"api/linea-smart-contracts/messageservice/l2/l2messageservice","title":"L2MessageService","description":"CONTRACT_VERSION","source":"@site/docs/api/linea-smart-contracts/messageservice/l2/l2messageservice.mdx","sourceDirName":"api/linea-smart-contracts/messageservice/l2","slug":"/api/linea-smart-contracts/messageservice/l2/l2messageservice","permalink":"/web3-feedback/api/linea-smart-contracts/messageservice/l2/l2messageservice","draft":false,"unlisted":false,"editUrl":"https://github.com/Consensys/doc.linea/tree/main/docs/api/linea-smart-contracts/messageservice/l2/l2messageservice.mdx","tags":[],"version":"current","lastUpdatedBy":"Joel Willmore","lastUpdatedAt":1746010655000,"frontMatter":{},"sidebar":"apiSidebar","previous":{"title":"L2MessageManager","permalink":"/web3-feedback/api/linea-smart-contracts/messageservice/l2/l2messagemanager"},"next":{"title":"L2MessageManagerV1","permalink":"/web3-feedback/api/linea-smart-contracts/messageservice/l2/v1/l2messagemanagerv1"}}');var t=i(74848),n=i(28453);const a={},l="L2MessageService",d={},c=[{value:"CONTRACT_VERSION",id:"contract_version",level:3},{value:"constructor",id:"constructor",level:3},{value:"initialize",id:"initialize",level:3},{value:"Parameters",id:"parameters",level:4},{value:"reinitializePauseTypesAndPermissions",id:"reinitializepausetypesandpermissions",level:3},{value:"Parameters",id:"parameters-1",level:4}];function o(e){const s={code:"code",em:"em",h1:"h1",h3:"h3",h4:"h4",header:"header",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,n.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.header,{children:(0,t.jsx)(s.h1,{id:"l2messageservice",children:(0,t.jsx)(s.code,{children:"L2MessageService"})})}),"\n",(0,t.jsx)(s.h3,{id:"contract_version",children:"CONTRACT_VERSION"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-solidity",children:"string CONTRACT_VERSION\n"})}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.em,{children:"This is the ABI version and not the reinitialize version."})}),"\n",(0,t.jsx)(s.h3,{id:"constructor",children:"constructor"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-solidity",children:"constructor() public\n"})}),"\n",(0,t.jsx)(s.h3,{id:"initialize",children:"initialize"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-solidity",children:"function initialize(uint256 _rateLimitPeriod, uint256 _rateLimitAmount, address _defaultAdmin, struct IPermissionsManager.RoleAddress[] _roleAddresses, struct IPauseManager.PauseTypeRole[] _pauseTypeRoles, struct IPauseManager.PauseTypeRole[] _unpauseTypeRoles) external\n"})}),"\n",(0,t.jsx)(s.p,{children:"Initializes underlying message service dependencies."}),"\n",(0,t.jsx)(s.h4,{id:"parameters",children:"Parameters"}),"\n",(0,t.jsxs)(s.table,{children:[(0,t.jsx)(s.thead,{children:(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.th,{children:"Name"}),(0,t.jsx)(s.th,{children:"Type"}),(0,t.jsx)(s.th,{children:"Description"})]})}),(0,t.jsxs)(s.tbody,{children:[(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"_rateLimitPeriod"}),(0,t.jsx)(s.td,{children:"uint256"}),(0,t.jsx)(s.td,{children:"The period to rate limit against."})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"_rateLimitAmount"}),(0,t.jsx)(s.td,{children:"uint256"}),(0,t.jsx)(s.td,{children:"The limit allowed for withdrawing the period."})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"_defaultAdmin"}),(0,t.jsx)(s.td,{children:"address"}),(0,t.jsx)(s.td,{children:"The account to be given DEFAULT_ADMIN_ROLE on initialization."})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"_roleAddresses"}),(0,t.jsx)(s.td,{children:"struct IPermissionsManager.RoleAddress[]"}),(0,t.jsx)(s.td,{children:"The list of addresses to grant roles to."})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"_pauseTypeRoles"}),(0,t.jsx)(s.td,{children:"struct IPauseManager.PauseTypeRole[]"}),(0,t.jsx)(s.td,{children:"The list of pause type roles."})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"_unpauseTypeRoles"}),(0,t.jsx)(s.td,{children:"struct IPauseManager.PauseTypeRole[]"}),(0,t.jsx)(s.td,{children:"The list of unpause type roles."})]})]})]}),"\n",(0,t.jsx)(s.h3,{id:"reinitializepausetypesandpermissions",children:"reinitializePauseTypesAndPermissions"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-solidity",children:"function reinitializePauseTypesAndPermissions(struct IPermissionsManager.RoleAddress[] _roleAddresses, struct IPauseManager.PauseTypeRole[] _pauseTypeRoles, struct IPauseManager.PauseTypeRole[] _unpauseTypeRoles) external\n"})}),"\n",(0,t.jsxs)(s.p,{children:["Sets permissions for a list of addresses and their roles as well as initialises the PauseManager pauseType",":role"," mappings."]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.em,{children:"This function is a reinitializer and can only be called once per version. Should be called using an upgradeAndCall transaction to the ProxyAdmin."})}),"\n",(0,t.jsx)(s.h4,{id:"parameters-1",children:"Parameters"}),"\n",(0,t.jsxs)(s.table,{children:[(0,t.jsx)(s.thead,{children:(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.th,{children:"Name"}),(0,t.jsx)(s.th,{children:"Type"}),(0,t.jsx)(s.th,{children:"Description"})]})}),(0,t.jsxs)(s.tbody,{children:[(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"_roleAddresses"}),(0,t.jsx)(s.td,{children:"struct IPermissionsManager.RoleAddress[]"}),(0,t.jsx)(s.td,{children:"The list of addresses and roles to assign permissions to."})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"_pauseTypeRoles"}),(0,t.jsx)(s.td,{children:"struct IPauseManager.PauseTypeRole[]"}),(0,t.jsx)(s.td,{children:"The list of pause types to associate with roles."})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"_unpauseTypeRoles"}),(0,t.jsx)(s.td,{children:"struct IPauseManager.PauseTypeRole[]"}),(0,t.jsx)(s.td,{children:"The list of unpause types to associate with roles."})]})]})]})]})}function h(e={}){const{wrapper:s}={...(0,n.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(o,{...e})}):o(e)}}}]);