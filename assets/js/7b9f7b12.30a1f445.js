"use strict";(self.webpackChunkweb3_feedback=self.webpackChunkweb3_feedback||[]).push([[6019],{28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var i=t(96540);const r={},s=i.createContext(r);function a(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(s.Provider,{value:n},e.children)}},93319:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"learn/voting-dapp","title":"Build a voting dapp","description":"A step-by-step guide to building a simple voting dapp on Linea.","source":"@site/docs/learn/voting-dapp.mdx","sourceDirName":"learn","slug":"/learn/voting-dapp","permalink":"/web3-feedback/learn/voting-dapp","draft":false,"unlisted":false,"editUrl":"https://github.com/Consensys/doc.linea/tree/main/docs/learn/voting-dapp.mdx","tags":[],"version":"current","lastUpdatedBy":"Joel Willmore","lastUpdatedAt":1744797916000,"frontMatter":{"title":"Build a voting dapp","description":"A step-by-step guide to building a simple voting dapp on Linea.","image":"/img/socialCards/build-a-voting-dapp.jpg"},"sidebar":"learnSidebar","previous":{"title":"Build a marketplace dapp","permalink":"/web3-feedback/learn/marketplace-dapp"},"next":{"title":"Ecosystem tutorials","permalink":"/web3-feedback/learn/ecosystem-tutorials/"}}');var r=t(74848),s=t(28453);const a={title:"Build a voting dapp",description:"A step-by-step guide to building a simple voting dapp on Linea.",image:"/img/socialCards/build-a-voting-dapp.jpg"},o=void 0,d={},c=[{value:"Architecture",id:"architecture",level:2},{value:"Set up the environment",id:"set-up-the-environment",level:2},{value:"Prerequisites",id:"prerequisites",level:3},{value:"Initialize the project",id:"initialize-the-project",level:3},{value:"Project structure",id:"project-structure",level:3},{value:"Install dependencies",id:"install-dependencies",level:3},{value:"Understanding the monorepo",id:"understanding-the-monorepo",level:3},{value:"Verify the setup",id:"verify-the-setup",level:3},{value:"Write the smart contract",id:"write-the-smart-contract",level:2},{value:"Deploy the smart contract",id:"deploy-the-smart-contract",level:2},{value:"Compile the contract",id:"compile-the-contract",level:3},{value:"Set up environment variables",id:"set-up-environment-variables",level:3},{value:"Deploy the smart contract",id:"deploy-the-smart-contract-1",level:3},{value:"Frontend integration with Next.js and Shadcn UI",id:"frontend-integration-with-nextjs-and-shadcn-ui",level:2},{value:"View frontend",id:"view-frontend",level:3},{value:"Configure Wagmi and MetaMask SDK",id:"configure-wagmi-and-metamask-sdk",level:3},{value:"Add contract constants",id:"add-contract-constants",level:3},{value:"React and hooks usage",id:"react-and-hooks-usage",level:2},{value:"Interface definition",id:"interface-definition",level:2},{value:"Component initialization",id:"component-initialization",level:2},{value:"Smart contract interaction - reading data",id:"smart-contract-interaction---reading-data",level:2},{value:"Early return for missing data",id:"early-return-for-missing-data",level:2},{value:"Voting functionality",id:"voting-functionality",level:2},{value:"UI rendering",id:"ui-rendering",level:2},{value:"Error handling and validation",id:"error-handling-and-validation",level:2},{value:"Run the development server",id:"run-the-development-server",level:3}];function l(e){const n={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"Web3 values such as transparency, trust and decentralization naturally lend themselves to\ndecentralized voting, where removing intermediaries and ensuring transparency can significantly\nenhance the democratic process."}),"\n",(0,r.jsx)(n.p,{children:"In this tutorial, we will build a simple voting dapp, and you'll learn how to write, deploy and\ninteract with a smart contract designed for a decentralized voting process."}),"\n",(0,r.jsx)(n.h2,{id:"architecture",children:"Architecture"}),"\n",(0,r.jsx)(n.p,{children:"The voting dapp has three main components:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Smart contracts"}),"\n",(0,r.jsx)(n.li,{children:"The smart contracts' integration"}),"\n",(0,r.jsx)(n.li,{children:"Frontend interface."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"The smart contract handles critical functionalities such as:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Registering candidates"}),"\n",(0,r.jsx)(n.li,{children:"Allowing users to give their votes based on candidates index numbers"}),"\n",(0,r.jsx)(n.li,{children:"Enforcing a one-vote-per-address policy"}),"\n",(0,r.jsx)(n.li,{children:"Managing the voting period by automatically closing it after a specified duration."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"The smart contract makes sure that the voting process is secure, transparent, and tamper-proof by\nrecording all votes on the blockchain."}),"\n",(0,r.jsx)(n.p,{children:"The frontend interface is the user-facing part of the application where users can interact and cast\ntheir votes by inputting the candidate index number. It also can show information about the\nremaining time period."}),"\n",(0,r.jsx)(n.p,{children:"To ensure seamless interaction with the Linea blockchain, we'll utilize the MetaMask SDK and Wagmi\nand connect through Infura RPC providers. These tools allow the frontend to communicate with the\nblockchain, enabling users to sign transactions and interact with the smart contracts directly from\ntheir web browsers."}),"\n",(0,r.jsx)(n.h2,{id:"set-up-the-environment",children:"Set up the environment"}),"\n",(0,r.jsxs)(n.p,{children:["Before we start building our dapp, we'll set up the development environment using ",(0,r.jsx)(n.strong,{children:"Consensys's\nCreate Web3 Template CLI"}),". This tool streamlines the process by generating a monorepo structure\nthat includes both the frontend and backend components needed for our application."]}),"\n",(0,r.jsx)(n.h3,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Node.js"})," and ",(0,r.jsx)(n.strong,{children:"pnpm/any other package manager"})," installed on your system."]}),"\n",(0,r.jsx)(n.li,{children:"Basic familiarity with the command line."}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"initialize-the-project",children:"Initialize the project"}),"\n",(0,r.jsxs)(n.p,{children:["Let's create a new project using the ",(0,r.jsx)(n.a,{href:"https://www.npmjs.com/package/@consensys/create-web3-template",children:"Create Web3 Template CLI"}),"\nby Consensys."]}),"\n",(0,r.jsx)(n.p,{children:"This command-line tool simplifies the setup process by providing all the necessary tools and\nintegrations out of the box, including MetaMask SDK, Linea support, Infura integration, and a\nselection of templates to choose from."}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Open your terminal and run the following command:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"pnpm create @consensys/create-web3-template\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["You'll be prompted to specify a name for your project. We'll name it ",(0,r.jsx)(n.code,{children:"simple-voting-dapp"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"? Please specify a name for your project: simple-voting-dapp\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Next, select the framework for your frontend. We'll choose ",(0,r.jsx)(n.strong,{children:"Next.js"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"? Please select the framework you want to use:\n  HardHat Vanilla\n  React\n\u276f Next.js\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"Selected framework: Next.js"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Choose the smart contract development environment. We'll go with ",(0,r.jsx)(n.strong,{children:"HardHat"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"? Would you like to use HardHat or Foundry?\n\u276f HardHat\n  Foundry\n\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"Selected tooling: HardHat"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Select your preferred package manager. We'll use ",(0,r.jsx)(n.strong,{children:"pnpm"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"? Please select the package manager you want to use:\n  Yarn\n  NPM\n\u276f pnpm\n\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"The CLI will generate the project based on your selections."}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"project-structure",children:"Project structure"}),"\n",(0,r.jsxs)(n.p,{children:["After the setup is complete, your project directory ",(0,r.jsx)(n.code,{children:"simple-voting-dapp"})," will have the following\nstructure:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"simple-voting-dapp\n\u251c\u2500\u2500 packages\n\u2502   \u251c\u2500\u2500 site          # Frontend built with Next.js\n\u2502   \u2514\u2500\u2500 blockchain    # Smart contracts using HardHat\n\u251c\u2500\u2500 pnpm-workspace.yaml\n\u251c\u2500\u2500 package.json\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"packages/site"})}),": Contains the frontend code of the dapp, built with Next.js."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"packages/blockchain"})}),": Contains the smart contracts and related scripts using HardHat."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"pnpm-workspace.yaml"})}),": Defines the workspace configuration for the monorepo."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"install-dependencies",children:"Install dependencies"}),"\n",(0,r.jsx)(n.p,{children:"Navigate into your project directory:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"cd simple-voting-dapp\n"})}),"\n",(0,r.jsx)(n.p,{children:"Install all the necessary dependencies:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"pnpm install\n"})}),"\n",(0,r.jsx)(n.p,{children:"This command will install all packages for both the frontend and backend components."}),"\n",(0,r.jsx)(n.h3,{id:"understanding-the-monorepo",children:"Understanding the monorepo"}),"\n",(0,r.jsxs)(n.p,{children:["A ",(0,r.jsx)(n.strong,{children:"monorepo"})," (monolithic repository) is a single repository that stores code for multiple\nprojects or packages. In our case, it allows us to manage both the frontend and backend in a\nunified codebase, making development and maintenance more efficient."]}),"\n",(0,r.jsx)(n.h3,{id:"verify-the-setup",children:"Verify the setup"}),"\n",(0,r.jsx)(n.p,{children:"To ensure everything is set up correctly, let's run the development servers."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"For the frontend:"})}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Navigate to the ",(0,r.jsx)(n.code,{children:"site"})," directory:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"cd packages/site\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Start the Next.js development server:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"pnpm dev\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Open your browser and go to ",(0,r.jsx)(n.code,{children:"http://localhost:3000"})," to see the frontend running."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"For the backend:"})}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Open a new terminal window."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Navigate to the ",(0,r.jsx)(n.code,{children:"blockchain"})," directory:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"cd packages/blockchain\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Compile the default smart contracts:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"pnpm hardhat compile\n"})}),"\n",(0,r.jsx)(n.p,{children:"This will compile the sample contracts included in the HardHat setup."}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"write-the-smart-contract",children:"Write the smart contract"}),"\n",(0,r.jsxs)(n.p,{children:["Let's create a ",(0,r.jsx)(n.code,{children:"Voting.sol"})," file and add the following code:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:'// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/// @title A contract for a voting system\n/// @author [Your Name]\n/// @notice This contract allows for the creation and management of a voting system\ncontract Voting {\n    /// @dev Struct to represent a candidate\n    struct Candidate {\n        string name;\n        uint256 voteCount;\n    }\n\n    /// @notice Array to store all candidates\n    Candidate[] public candidates;\n    \n    /// @notice Address of the contract owner\n    address owner;\n    \n    /// @notice Mapping to track if an address has voted\n    mapping(address => bool) public voters;\n\n    /// @notice Timestamp when voting starts\n    uint256 public votingStart;\n    \n    /// @notice Timestamp when voting ends\n    uint256 public votingEnd;\n\n    /// @notice Constructor to initialize the voting contract\n    /// @param _candidateNames Array of candidate names\n    /// @param _durationInMinutes Duration of the voting period in minutes\n    constructor(string[] memory _candidateNames, uint256 _durationInMinutes) {\n        for (uint256 i = 0; i < _candidateNames.length; i++) {\n            candidates.push(Candidate({\n                name: _candidateNames[i],\n                voteCount: 0\n            }));\n        }\n        owner = msg.sender;\n        votingStart = block.timestamp;\n        votingEnd = block.timestamp + (_durationInMinutes * 1 minutes);\n    }\n\n    /// @notice Modifier to restrict function access to the contract owner\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    /// @notice Adds a new candidate to the election\n    /// @param _name Name of the new candidate\n    function addCandidate(string memory _name) public onlyOwner {\n        candidates.push(Candidate({\n                name: _name,\n                voteCount: 0\n        }));\n    }\n\n    /// @notice Allows a voter to cast their vote\n    /// @param _candidateIndex Index of the candidate in the candidates array\n    function vote(uint256 _candidateIndex) public {\n        require(!voters[msg.sender], "You have already voted.");\n        require(_candidateIndex < candidates.length, "Invalid candidate index.");\n\n        candidates[_candidateIndex].voteCount++;\n        voters[msg.sender] = true;\n    }\n\n    /// @notice Retrieves all candidates and their vote counts\n    /// @return An array of Candidate structs\n    function getAllVotesOfCandidates() public view returns (Candidate[] memory){\n        return candidates;\n    }\n\n    /// @notice Checks if voting is currently active\n    /// @return Boolean indicating if voting is active\n    function getVotingStatus() public view returns (bool) {\n        return (block.timestamp >= votingStart && block.timestamp < votingEnd);\n    }\n\n    /// @notice Calculates the remaining time in the voting period\n    /// @return The remaining time in seconds\n    function getRemainingTime() public view returns (uint256) {\n        require(block.timestamp >= votingStart, "Voting has not started yet.");\n        if (block.timestamp >= votingEnd) {\n            return 0;\n        }\n        return votingEnd - block.timestamp;\n    }\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"This contract provides a basic framework for a decentralized voting system where users can cast\nvotes for candidates securely and transparently. It ensures that each user can vote only once by\ntracking voter addresses, and it maintains a record of all votes on the blockchain. The contract\nmanages the voting period by specifying start and end times, enforcing voting rules, and providing\nfunctions to retrieve voting results and status. Let's explore the concept of the smart contract a\nbit more:"}),"\n",(0,r.jsx)("div",{class:"center-container",children:(0,r.jsx)("div",{class:"img-large",children:(0,r.jsx)("img",{src:"/img/voting-dapp/voting.png",alt:""})})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"1. Contract initialization and candidate setup"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["The ",(0,r.jsx)(n.code,{children:"Voting"})," contract initializes with an array of candidate names provided during deployment."]}),"\n",(0,r.jsxs)(n.li,{children:["Each candidate is represented by a ",(0,r.jsx)(n.code,{children:"Candidate"})," struct containing a ",(0,r.jsx)(n.code,{children:"name"})," and a ",(0,r.jsx)(n.code,{children:"voteCount"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["The constructor sets the ",(0,r.jsx)(n.code,{children:"votingStart"})," time to the current block timestamp."]}),"\n",(0,r.jsxs)(n.li,{children:["It calculates the ",(0,r.jsx)(n.code,{children:"votingEnd"})," time by adding the specified duration in minutes to the start time."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"2. Access control and owner functions"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["The contract stores the deployer's address as ",(0,r.jsx)(n.code,{children:"owner"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["An ",(0,r.jsx)(n.code,{children:"onlyOwner"})," modifier restricts certain functions to the contract owner."]}),"\n",(0,r.jsxs)(n.li,{children:["The ",(0,r.jsx)(n.code,{children:"addCandidate"})," function allows the owner to add new candidates after hardhat deployment.This ensures only authorized users can modify the list of candidates."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"3. Voting mechanism"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["The ",(0,r.jsx)(n.code,{children:"vote"})," function lets users cast a vote by specifying a candidate's index."]}),"\n",(0,r.jsxs)(n.li,{children:["A ",(0,r.jsx)(n.code,{children:"voters"})," mapping tracks whether an address has already voted."]}),"\n",(0,r.jsx)(n.li,{children:"The function checks if the voter hasn't voted before and if the candidate index is valid."}),"\n",(0,r.jsxs)(n.li,{children:["Upon a valid vote, it increments the candidate's ",(0,r.jsx)(n.code,{children:"voteCount"})," and marks the voter as having voted."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"4. Utility functions and voting status"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"getAllVotesOfCandidates"})," returns all candidates and their current vote counts."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"getVotingStatus"})," returns ",(0,r.jsx)(n.code,{children:"true"})," if voting is active based on the current time."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"getRemainingTime"})," calculates and returns how much time is left in the voting period."]}),"\n",(0,r.jsx)(n.li,{children:"These functions provide users with real-time information about the election."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"This smart contract facilitates a decentralized voting system where users can vote for candidates\nsecurely, with all votes and results recorded on the blockchain."}),"\n",(0,r.jsx)(n.h2,{id:"deploy-the-smart-contract",children:"Deploy the smart contract"}),"\n",(0,r.jsxs)(n.p,{children:["In the ",(0,r.jsx)(n.code,{children:"ignition"})," folder, let's create a file named ",(0,r.jsx)(n.code,{children:"Voting.ts"})," to deploy our contract. Add the\nfollowing code:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:'import { buildModule } from "@nomicfoundation/hardhat-ignition/modules";\n\nconst VotingModule = buildModule("VotingModule", (m) => {\n  // Default values\n  const DEFAULT_CANDIDATES = ["Candidate 1", "Candidate 2", "Candidate 3"];\n  const DEFAULT_DURATION_MINUTES = 60; // 1 hour\n\n  // Get parameters with default values\n  const candidateNames = m.getParameter("candidateNames", DEFAULT_CANDIDATES);\n  const durationInMinutes = m.getParameter(\n    "durationInMinutes",\n    DEFAULT_DURATION_MINUTES\n  );\n\n  // Deploy the Voting contract\n  const voting = m.contract("Voting", [\n    candidateNames,\n    durationInMinutes,\n  ]);\n\n  return { voting };\n});\n\nexport default VotingModule;\n'})}),"\n",(0,r.jsxs)(n.p,{children:["In this deployment script, we utilize Hardhat Ignition to manage the deployment of our ",(0,r.jsx)(n.code,{children:"Voting"}),"\ncontract. We set default candidates and a default voting duration but also allow these values to be\ncustomized through parameters if needed."]}),"\n",(0,r.jsx)(n.h3,{id:"compile-the-contract",children:"Compile the contract"}),"\n",(0,r.jsxs)(n.p,{children:["Before deploying, compile the contract by running the following command in the ",(0,r.jsx)(n.code,{children:"blockchain"})," directory:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npx hardhat compile\n"})}),"\n",(0,r.jsx)(n.p,{children:"This will compile your Solidity code and prepare it for deployment."}),"\n",(0,r.jsx)(n.h3,{id:"set-up-environment-variables",children:"Set up environment variables"}),"\n",(0,r.jsxs)(n.p,{children:["Before deploying the smart contract, ensure that your ",(0,r.jsx)(n.code,{children:".env"})," file in the ",(0,r.jsx)(n.code,{children:"packages/blockchain"}),"\ndirectory is updated with the necessary environment variables:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Infura API key for connecting to Ethereum networks\nINFURA_API_KEY=your_infura_api_key_here\n\n# Private key of the account to be used for deployments and transactions\nACCOUNT_PRIVATE_KEY=your_account_private_key_here\n\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Replace ",(0,r.jsx)(n.code,{children:"your_infura_api_key_here"})," with your actual Infura API key."]}),"\n",(0,r.jsxs)(n.li,{children:["Replace ",(0,r.jsx)(n.code,{children:"your_account_private_key_here"})," with the private key of the Ethereum account you will use\nfor deploying the contract."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"deploy-the-smart-contract-1",children:"Deploy the smart contract"}),"\n",(0,r.jsxs)(n.p,{children:["To deploy the smart contract on Linea Sepolia, run the following command from the ",(0,r.jsx)(n.code,{children:"blockchain"}),"\ndirectory:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npx hardhat ignition deploy ignition/modules/Voting.ts --network linea-testnet\n"})}),"\n",(0,r.jsxs)(n.p,{children:["This command tells Hardhat to use Ignition to deploy the ",(0,r.jsx)(n.code,{children:"Voting"})," module to the ",(0,r.jsx)(n.code,{children:"linea-testnet"}),"\nnetwork."]}),"\n",(0,r.jsxs)(n.p,{children:["Alternatively, you can add a deployment script to your ",(0,r.jsx)(n.code,{children:"package.json"})," to simplify the process. Add\nthe following line under the ",(0,r.jsx)(n.code,{children:'"scripts"'})," section:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'"scripts": {\n  "deploy:testnet": "npx hardhat ignition deploy ignition/modules/Voting.ts --network linea-testnet"\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"Now you can deploy the contract by simply running:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"pnpm run deploy:testnet\n"})}),"\n",(0,r.jsx)(n.p,{children:"After deployment, you'll receive the contract address. Keep this address safe, as we'll need it\nwhen integrating with the frontend."}),"\n",(0,r.jsx)(n.h2,{id:"frontend-integration-with-nextjs-and-shadcn-ui",children:"Frontend integration with Next.js and Shadcn UI"}),"\n",(0,r.jsx)(n.h3,{id:"view-frontend",children:"View frontend"}),"\n",(0,r.jsxs)(n.p,{children:["Navigate to the ",(0,r.jsx)(n.code,{children:"site"})," directory in your monorepo:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"cd packages/site\n"})}),"\n",(0,r.jsx)(n.p,{children:"Since we've already set up the frontend using the Create Web3 Template CLI, we can proceed to\nintegrate our smart contract."}),"\n",(0,r.jsx)(n.h3,{id:"configure-wagmi-and-metamask-sdk",children:"Configure Wagmi and MetaMask SDK"}),"\n",(0,r.jsxs)(n.p,{children:["Create a ",(0,r.jsx)(n.code,{children:"wagmi.config.ts"})," file in the ",(0,r.jsx)(n.code,{children:"src"})," directory with the following content:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:'import { http, createConfig } from "wagmi";\nimport { lineaSepolia } from "wagmi/chains";\nimport { metaMask } from "wagmi/connectors";\n\nexport const config = createConfig({\n  chains: [lineaSepolia],\n  connectors: [metaMask()],\n  transports: {\n    [lineaSepolia.id]: http(),\n  },\n});\n'})}),"\n",(0,r.jsx)(n.p,{children:"This configuration sets up the connection to the Linea testnet and enables wallet integration\nusing MetaMask."}),"\n",(0,r.jsx)(n.h3,{id:"add-contract-constants",children:"Add contract constants"}),"\n",(0,r.jsxs)(n.p,{children:["In the ",(0,r.jsx)(n.code,{children:"src"})," directory, create a file named ",(0,r.jsx)(n.code,{children:"constants.ts"})," and add the following:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"export const CONTRACT_ADDRESS = 'your_deployed_contract_address_here';\n\nexport const ABI = [\n  // Paste the ABI of your Voting contract here\n];\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Replace ",(0,r.jsx)(n.code,{children:"'your_deployed_contract_address_here'"})," with the actual contract address you obtained\nafter deployment."]}),"\n",(0,r.jsxs)(n.li,{children:["For the ABI, you can find it in the ",(0,r.jsx)(n.code,{children:"artifacts"})," folder generated by Hardhat after compilation."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"react-and-hooks-usage",children:"React and hooks usage"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:'"use client";\n\nimport { useState } from "react";\nimport { useAccount, useWalletClient } from "wagmi";\nimport { ConnectButton } from "@consensys/connect-button";\nimport { Button } from "@/components/ui/button";\nimport { Input } from "@/components/ui/input";\nimport { useReadContract, useWriteContract } from "wagmi";\nimport { Card, CardContent } from "@/components/ui/card";\nimport { contractAddress, contractAbi } from "../../constants";\n'})}),"\n",(0,r.jsxs)(n.p,{children:["This Next.js client-side component uses React's ",(0,r.jsx)(n.code,{children:"useState"})," for state management, Wagmi hooks\n(",(0,r.jsx)(n.code,{children:"useAccount"}),", ",(0,r.jsx)(n.code,{children:"useWalletClient"}),", ",(0,r.jsx)(n.code,{children:"useReadContract"}),", ",(0,r.jsx)(n.code,{children:"useWriteContract"}),") for wallet and contract\ninteractions, imports UI elements (",(0,r.jsx)(n.code,{children:"Button"}),", ",(0,r.jsx)(n.code,{children:"Input"}),", ",(0,r.jsx)(n.code,{children:"Card"}),", ",(0,r.jsx)(n.code,{children:"CardContent"}),") from Shadcn UI,\nincludes a ",(0,r.jsx)(n.code,{children:"ConnectButton"})," for MetaMask connection, and brings in ",(0,r.jsx)(n.code,{children:"contractAddress"})," and ",(0,r.jsx)(n.code,{children:"contractAbi"}),"\nfrom constants for contract use."]}),"\n",(0,r.jsx)(n.h2,{id:"interface-definition",children:"Interface definition"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:"interface Candidate {\n  index: number;\n  name: string;\n  voteCount: number;\n}\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Defines a TypeScript ",(0,r.jsx)(n.code,{children:"interface"})," named ",(0,r.jsx)(n.code,{children:"Candidate"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Specifies the structure for candidate objects:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"index"}),": The candidate's index number."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"name"}),": The candidate's name."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"voteCount"}),": The number of votes the candidate has received."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"component-initialization",children:"Component initialization"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:'export default function Home() {\n  const { address } = useAccount();\n  const { data: walletClient } = useWalletClient();\n  const [number, setNumber] = useState("");\n\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Function component"}),": Defines the ",(0,r.jsx)(n.code,{children:"Home"})," component as the default export."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Wallet information"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"address"}),": The user's wallet address obtained from ",(0,r.jsx)(n.code,{children:"useAccount"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"walletClient"}),": The wallet client used for signing transactions."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"State management"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"number"}),": A state variable to store the candidate index input by the user for voting."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"setNumber"}),": Function to update the ",(0,r.jsx)(n.code,{children:"number"})," state."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"smart-contract-interaction---reading-data",children:"Smart contract interaction - reading data"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:'const { writeContract } = useWriteContract();\n\nconst { data: votingStatus } = useReadContract({\n  address: contractAddress,\n  abi: contractAbi,\n  functionName: "getVotingStatus",\n}) as { data: boolean };\n\nconst { data: canVote } = useReadContract({\n  address: contractAddress,\n  abi: contractAbi,\n  functionName: "voters",\n  args: [address],\n});\n\nconst { data: remainingTime } = useReadContract({\n  address: contractAddress,\n  abi: contractAbi,\n  functionName: "getRemainingTime",\n}) as { data: bigint };\n\nconst { data: candidates } = useReadContract({\n  address: contractAddress,\n  abi: contractAbi,\n  functionName: "getAllVotesOfCandidates",\n}) as { data: Candidate[] };\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Writing to contract"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"writeContract"})," is prepared for sending transactions to the smart contract."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Reading contract data"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"votingStatus"}),": Retrieves whether the voting is currently active."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"canVote"}),": Checks if the current user has already voted."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"remainingTime"}),": Gets the time remaining before the voting period ends."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"candidates"}),": Fetches the list of all candidates and their vote counts."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Type assertions"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Uses TypeScript ",(0,r.jsx)(n.code,{children:"as"})," syntax to specify the expected data type for better type safety."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"early-return-for-missing-data",children:"Early return for missing data"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:"if (!candidates) return;\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Checks if the ",(0,r.jsx)(n.code,{children:"candidates"})," data is available."]}),"\n",(0,r.jsxs)(n.li,{children:["If ",(0,r.jsx)(n.code,{children:"candidates"})," is ",(0,r.jsx)(n.code,{children:"undefined"})," or ",(0,r.jsx)(n.code,{children:"null"}),", the component returns early to prevent rendering errors."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"voting-functionality",children:"Voting functionality"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:'async function vote() {\n  if (!walletClient || !address || number === "") {\n    console.error("Missing required data for voting");\n    return;\n  }\n  if (\n    isNaN(Number(number)) ||\n    Number(number) < 0 ||\n    Number(number) >= candidates.length\n  ) {\n    console.error("Invalid candidate index");\n    return;\n  }\n  if (!votingStatus) {\n    console.error("Voting is not currently active");\n    return;\n  }\n  try {\n    console.log("Attempting to vote for candidate index:", number);\n    writeContract({\n      address: contractAddress,\n      abi: contractAbi,\n      functionName: "vote",\n      args: [BigInt(number)],\n      account: address,\n    });\n  } catch (error) {\n    console.error("Detailed error in vote function:", error);\n  }\n}\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Input validation"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Checks if the wallet client, user address, and candidate number are available."}),"\n",(0,r.jsx)(n.li,{children:"Validates that the candidate index is a valid number within the range of available candidates."}),"\n",(0,r.jsx)(n.li,{children:"Ensures that voting is currently active."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Voting process"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Uses ",(0,r.jsx)(n.code,{children:"writeContract"})," to call the ",(0,r.jsx)(n.code,{children:"vote"})," function on the smart contract."]}),"\n",(0,r.jsxs)(n.li,{children:["Passes the candidate index as a ",(0,r.jsx)(n.code,{children:"BigInt"}),"."]}),"\n",(0,r.jsx)(n.li,{children:"Uses the user's wallet address as the account."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Error handling"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Wraps the contract interaction in a ",(0,r.jsx)(n.code,{children:"try-catch"})," block to handle any errors that occur during\nthe voting process."]}),"\n",(0,r.jsx)(n.li,{children:"Logs detailed error information to the console."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"ui-rendering",children:"UI rendering"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:'return (\n  <main className="container mx-auto p-4">\n    <h1 className="text-2xl font-bold mb-4">\n      Decentralized Voting Application\n    </h1>\n    <ConnectButton />\n\n    {votingStatus ? (\n      address ? (\n        <Card className="mt-4">\n          <CardContent>\n            <p>Connected Account: {address}</p>\n            <p>Remaining Time: {Number(remainingTime)} seconds</p>\n            {!canVote ? (\n              <div className="mt-4">\n                <Input\n                  type="number"\n                  placeholder="Enter Candidate Index"\n                  value={number}\n                  onChange={(e) => setNumber(e.target.value)}\n                  className="mb-2"\n                />\n                <Button onClick={vote}>Vote</Button>\n              </div>\n            ) : (\n              <p>You have already voted</p>\n            )}\n            <div className="mt-4">\n              <h2 className="text-xl font-semibold mb-2">Candidates</h2>\n              <ul>\n                {candidates.map((candidate) => (\n                  <li key={candidate.index}>\n                    {candidates.indexOf(candidate)}: {candidate.name} -{" "}\n                    {Number(candidate.voteCount)} votes\n                  </li>\n                ))}\n              </ul>\n            </div>\n          </CardContent>\n        </Card>\n      ) : (\n        <p>Please connect your wallet to vote</p>\n      )\n    ) : (\n      <p>Voting has finished</p>\n    )}\n  </main>\n);\n\n'})}),"\n",(0,r.jsxs)(n.p,{children:["The component features a styled main container with a header and a ",(0,r.jsx)(n.code,{children:"ConnectButton"})," for MetaMask\nintegration. It conditionally renders content based on ",(0,r.jsx)(n.code,{children:"votingStatus"})," and user connection: if voting\nis active and the user is connected, it displays their address, remaining time, and voting options;\nif they've already voted, it notifies them and lists all candidates. If the user isn't connected,\nit prompts them to connect their wallet. When voting has ended, it shows \"Voting has finished\"."]}),"\n",(0,r.jsx)(n.h2,{id:"error-handling-and-validation",children:"Error handling and validation"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Input validation"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Ensures the candidate index entered is a valid number within the acceptable range."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Error messages"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Uses ",(0,r.jsx)(n.code,{children:"console.error"})," to log meaningful error messages for debugging purposes."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"User feedback"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Provides real-time feedback to the user based on their actions and the application's state."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["View the ",(0,r.jsx)(n.a,{href:"https://github.com/meowyx/simple-voting-dapp",children:"full code"}),"."]}),"\n",(0,r.jsx)(n.h3,{id:"run-the-development-server",children:"Run the development server"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npm run dev\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Your Next.js application with Shadcn UI should now be running at ",(0,r.jsx)(n.code,{children:"http://localhost:3000"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"Now, you have a decentralized voting dapp where users can vote for the candidates by using their\nindex number. These votes are secure, transparent and recorded on Linea blockchain."}),"\n",(0,r.jsx)(n.p,{children:"To build on this project, you could add voter registration or vote delegation, enhance security\nmeasures, or improve the user interface for better accessibility."}),"\n",(0,r.jsx)(n.p,{children:"Happy coding!"})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}}}]);