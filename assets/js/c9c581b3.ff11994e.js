"use strict";(self.webpackChunkweb3_feedback=self.webpackChunkweb3_feedback||[]).push([[2087],{28453:(e,n,a)=>{a.d(n,{R:()=>c,x:()=>o});var d=a(96540);const t={},r=d.createContext(t);function c(e){const n=d.useContext(r);return d.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:c(e.components),d.createElement(r.Provider,{value:n},e.children)}},36072:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>f,frontMatter:()=>c,metadata:()=>d,toc:()=>i});const d=JSON.parse('{"id":"api/reference/linea-getproof","title":"linea_getProof","description":"Reference content for the linea_getProof method.","source":"@site/docs/api/reference/linea-getproof.mdx","sourceDirName":"api/reference","slug":"/api/reference/linea-getproof","permalink":"/web3-feedback/api/reference/linea-getproof","draft":false,"unlisted":false,"editUrl":"https://github.com/Consensys/doc.linea/tree/main/docs/api/reference/linea-getproof.mdx","tags":[],"version":"current","lastUpdatedBy":"Joel Willmore","lastUpdatedAt":1746005489000,"frontMatter":{"title":"linea_getProof","description":"Reference content for the linea_getProof method.","image":"/img/socialCards/lineagetproof.jpg"},"sidebar":"apiSidebar","previous":{"title":"linea_getTransactionExclusionStatusV1","permalink":"/web3-feedback/api/reference/linea-gettransactionexclusionstatusv1"},"next":{"title":"Token API","permalink":"/web3-feedback/api/token-api/overview"}}');var t=a(74848),r=a(28453);const c={title:"linea_getProof",description:"Reference content for the linea_getProof method.",image:"/img/socialCards/lineagetproof.jpg"},o="linea_getProof",s={},i=[{value:"Parameters",id:"parameters",level:2},{value:"Returns",id:"returns",level:2},{value:"Example",id:"example",level:2},{value:"Request",id:"request",level:3},{value:"Response",id:"response",level:3}];function l(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"linea_getproof",children:(0,t.jsx)(n.code,{children:"linea_getProof"})})}),"\n",(0,t.jsx)(n.p,{children:"Returns the account and storage values, including the Merkle proof, of the specified account.\nThe supplied block parameter must be an L2 block that has been finalized on L1."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["When an account or storage slot exists, the response includes the ",(0,t.jsx)(n.code,{children:"leafIndex"})," and\na proof of existence."]}),"\n",(0,t.jsx)(n.li,{children:"When an account or storage slot doesn't exist, the response will include the proof of the\nelements before and after it in the tree."}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["In the ",(0,t.jsx)(n.a,{href:"#response",children:"example response"})," the account exists but the slot doesn't."]}),"\n",(0,t.jsx)(n.h2,{id:"parameters",children:"Parameters"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"address"}),": A string representing the address (20 bytes) for which the proof is requested."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"storageKeys"}),": An array of 32-byte storage keys to be proofed and included."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"blockParameter"}),": A hexadecimal block number, or one of the string tags  ",(0,t.jsx)(n.code,{children:"latest"}),", ",(0,t.jsx)(n.code,{children:"earliest"}),",\n",(0,t.jsx)(n.code,{children:"pending"}),", or ",(0,t.jsx)(n.code,{children:"finalized"}),"."]}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsxs)(n.p,{children:["A ",(0,t.jsx)(n.code,{children:"finalized"})," block is a block on an L2 blockchain (Linea) that has been confirmed and validated by\nthe L1 blockchain (Ethereum)."]})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"returns",children:"Returns"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"accountProof"}),": Provides proof data for the account:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"key"}),": The address of the account for which the proof is generated."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"leafIndex"}),": The index of the leaf node in the sparse Merkle tree that corresponds to the account."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"proof"}),": Object containing the proof data for the account:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"proofRelatedNodes"}),": Array of nodes in the sparse Merkle tree used to construct the proof."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"value"}),": The value stored at the account's leaf node in the sparse Merkle tree."]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"storageProof"}),": An array of storage-entries as requested. Each entry is an object with these properties:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"key"}),": The requested storage key."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"leftLeafIndex"}),": The index of the left leaf node in the sparse Merkle tree that corresponds to the\nstorage slot."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"leftProof"}),": Contains the proof data for the left leaf node, which includes the array of nodes used\nto construct the proof and the value stored at the left leaf node in the sparse Merkle tree."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"rightLeafIndex"}),": The index of the right leaf node in the sparse Merkle tree that corresponds to\nthe storage slot."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"rightProof"}),": Contains the proof data for the right leaf node, which includes the array of nodes used\nto construct the proof and the value stored at the right leaf node in the sparse Merkle tree."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,t.jsx)(n.h3,{id:"request",children:"Request"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'curl https://linea-mainnet.infura.io/v3/YOUR-API-KEY \\\n-X POST \\\n-H "Content-Type: application/json" \\\n-d \'{\n    "jsonrpc": "2.0",\n    "method": "linea_getProof",\n    "params": [\n        "0x87f21c771EAC9c547Eb22312997153D3A1fC40F6",\n            ["0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421"], "0x7AA88B"\n    ],\n    "id": 1\n}\'\n'})}),"\n",(0,t.jsx)(n.h3,{id:"response",children:"Response"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "jsonrpc": "2.0",\n  "id": 1,\n  "result": {\n    "accountProof": {\n      "key": "0x87f21c771eac9c547eb22312997153d3a1fc40f6",\n      "leafIndex": 2410424,\n      "proof": {\n        "proofRelatedNodes": [\n          "0x000000000000000000000000000000000000000000000000000000000075965e0a85198ef8a5f75a15db565de5bff89b409ff5e507a7be546149c32b99044df3",\n          "0x008a47a2a53dd5183a2dc127c399a004e2a6c7e60f73e104d7d79e6a2bd7e809008a47a2a53dd5183a2dc127c399a004e2a6c7e60f73e104d7d79e6a2bd7e809",\n          "0x060f08aed06ffb90efc9705dc38d37a7000da1add99cef1b8a84b9e72e7c8b7b060f08aed06ffb90efc9705dc38d37a7000da1add99cef1b8a84b9e72e7c8b7b",\n          ...\n        ],\n        "value": "0x0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000001f2f46337996eabca16927c459f3fbdb8fb82672c464aa332b613a3c08db27c03dcbfed33825518e0122265146c2948b3bcb9b173348556e13c462f7a6b1a86f7d11acadc51eaeba164e92ebb5ecbe6c64ebc7d0190f93bf0edebeadf610ad80000000000000000000000000000000000000000000000000000000000001c85"\n      }\n    },\n    "storageProofs": [\n      {\n        "key": "0x0000000000000000000000000000000000000000000000000000000000000001",\n        "leftLeafIndex": 0,\n        "leftProof": {\n          "proofRelatedNodes": [\n            "0x00000000000000000000000000000000000000000000000000000000000000030961e5d86a7bbdaac1547b2abfdb09dcaa0548b3d277a154b8c89081a22195a4",\n            "0x008a47a2a53dd5183a2dc127c399a004e2a6c7e60f73e104d7d79e6a2bd7e809008a47a2a53dd5183a2dc127c399a004e2a6c7e60f73e104d7d79e6a2bd7e809",\n            "0x060f08aed06ffb90efc9705dc38d37a7000da1add99cef1b8a84b9e72e7c8b7b060f08aed06ffb90efc9705dc38d37a7000da1add99cef1b8a84b9e72e7c8b7b",\n            "0x0a06dc31ae8e893bca0a076decb8c0caa9036b5f394abf79d7956411eef322550a06dc31ae8e893bca0a076decb8c0caa9036b5f394abf79d7956411eef32255",\n           ...\n          ],\n          "value": "0x0000000000000000000000000000000000000000000000000000000000000000"\n        },\n        "rightLeafIndex": 2,\n        "rightProof": {\n          "proofRelatedNodes": [\n            "0x00000000000000000000000000000000000000000000000000000000000000030961e5d86a7bbdaac1547b2abfdb09dcaa0548b3d277a154b8c89081a22195a4",\n            "0x008a47a2a53dd5183a2dc127c399a004e2a6c7e60f73e104d7d79e6a2bd7e809008a47a2a53dd5183a2dc127c399a004e2a6c7e60f73e104d7d79e6a2bd7e809",\n            "0x060f08aed06ffb90efc9705dc38d37a7000da1add99cef1b8a84b9e72e7c8b7b060f08aed06ffb90efc9705dc38d37a7000da1add99cef1b8a84b9e72e7c8b7b",\n            "0x0a06dc31ae8e893bca0a076decb8c0caa9036b5f394abf79d7956411eef322550a06dc31ae8e893bca0a076decb8c0caa9036b5f394abf79d7956411eef32255",\n            ...\n          ],\n          "value": "0x0000000000000000000000000000000000000000000000000000000000000064"\n        }\n      }\n    ]\n  }\n}\n'})})]})}function f(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}}}]);