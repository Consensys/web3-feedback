"use strict";(self.webpackChunkweb3_feedback=self.webpackChunkweb3_feedback||[]).push([[7872],{28453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>r});var a=n(96540);const i={},o=a.createContext(i);function s(e){const t=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),a.createElement(o.Provider,{value:t},e.children)}},75647:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>d,frontMatter:()=>s,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"technology/transaction-lifecycle","title":"Transaction lifecycle","description":"An overview of what happens to transactions from the point of submission to finalization","source":"@site/docs/technology/transaction-lifecycle.mdx","sourceDirName":"technology","slug":"/technology/transaction-lifecycle","permalink":"/web3-feedback/technology/transaction-lifecycle","draft":false,"unlisted":false,"editUrl":"https://github.com/Consensys/doc.linea/tree/main/docs/technology/transaction-lifecycle.mdx","tags":[],"version":"current","lastUpdatedBy":"Joel Willmore","lastUpdatedAt":1746010655000,"frontMatter":{"title":"Transaction lifecycle","description":"An overview of what happens to transactions from the point of submission to finalization","image":"/img/socialCards/transaction-lifecycle.jpg"},"sidebar":"technologySidebar","previous":{"title":"Linea repositories","permalink":"/web3-feedback/technology/repos"},"next":{"title":"Network data","permalink":"/web3-feedback/technology/network-data"}}');var i=n(74848),o=n(28453);const s={title:"Transaction lifecycle",description:"An overview of what happens to transactions from the point of submission to finalization",image:"/img/socialCards/transaction-lifecycle.jpg"},r=void 0,c={},l=[{value:"Step 1: Submission",id:"step-1-submission",level:2},{value:"Step 2: Block building",id:"step-2-block-building",level:2},{value:"Step 3: Transaction data sent to the state manager",id:"step-3-transaction-data-sent-to-the-state-manager",level:2},{value:"Step 4: Conflation",id:"step-4-conflation",level:2},{value:"Step 5: Generating a ZK proof using transaction data",id:"step-5-generating-a-zk-proof-using-transaction-data",level:2},{value:"Step 6: Batch finalization",id:"step-6-batch-finalization",level:2}];function h(e){const t={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",li:"li",p:"p",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(t.admonition,{title:"A note on finality",type:"note",children:[(0,i.jsx)(t.p,{children:"Finality has two definitions on Linea:"}),(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["Soft finality: The transaction is confirmed on Linea. This takes two seconds, i.e Linea's block\ntime. See ",(0,i.jsx)(t.a,{href:"#step-3-transaction-data-sent-to-the-state-manager",children:"step 3"}),". For simplicity, Linea is\nguaranteed to not reorg\u2014remove competing versions of blockchain history in favor of a canonical\none\u2014when there are reorgs on L1."]}),"\n",(0,i.jsxs)(t.li,{children:["Hard finality: The proof submitted to L1 has been verified, and two epochs have elapsed. The\ntypical time before hard finality is 6-32 hours, although the six-hour minimum will be reduced to\nzero in future. See ",(0,i.jsx)(t.a,{href:"#step-6-batch-finalization",children:"step 6"}),"."]}),"\n"]})]}),"\n",(0,i.jsx)(t.p,{children:"Transactions on Linea proceed through the following steps:"}),"\n",(0,i.jsx)(t.h2,{id:"step-1-submission",children:"Step 1: Submission"}),"\n",(0,i.jsxs)(t.p,{children:["This is where every transaction originates: at the wallet level, a user signs a transaction and\nbroadcasts it to Linea. From here, transactions head straight to the ",(0,i.jsx)(t.strong,{children:"mempool"}),", similarly to\nEthereum, where they become pending transactions."]}),"\n",(0,i.jsx)(t.h2,{id:"step-2-block-building",children:"Step 2: Block building"}),"\n",(0,i.jsxs)(t.p,{children:["The Linea ",(0,i.jsx)(t.a,{href:"/web3-feedback/technology/sequencer/",children:"sequencer"})," is responsible for ordering, building, and\nexecuting blocks. For each transaction added to the mempool, the sequencer checks its validity,\nrejecting transactions as necessary. Transaction validity conditions are specific to Linea, and\ndiffer slightly from those on other networks, including Ethereum."]}),"\n",(0,i.jsx)(t.p,{children:"The sequencer orders transactions according to the priority fee paid for each, a method known as\na priority gas auction. So, having passed the above checks, valid transactions are placed into\nblocks in the correct sequence and executed."}),"\n",(0,i.jsx)(t.p,{children:"At this point, the transaction's lifecycle is more or less complete \u2014 at least from a user\nperspective. The block containing the transaction has been added to the \"head\" of the Linea\nblockchain\u2014the most recent block\u2014and a transaction receipt is returned to the user's wallet as\nconfirmation."}),"\n",(0,i.jsx)(t.p,{children:"However, the transaction and its associated data will continue to be processed in order to\ngenerate ZK proofs. Let's press on."}),"\n",(0,i.jsx)(t.h2,{id:"step-3-transaction-data-sent-to-the-state-manager",children:"Step 3: Transaction data sent to the state manager"}),"\n",(0,i.jsxs)(t.p,{children:["Data about the transaction and the state of the network at its time of execution are recorded\nin ",(0,i.jsx)(t.strong,{children:"traces"}),", an output of part of the sequencer called the ",(0,i.jsx)(t.a,{href:"/web3-feedback/technology/sequencer/traces-generator",children:"trace generator"}),"."]}),"\n",(0,i.jsx)(t.p,{children:"Traces are passed to the state manager block-by-block and then used to update the network state.\nOnce state is up to date, you'll see the transaction reflected and confirmed in your wallet."}),"\n",(0,i.jsxs)(t.p,{children:["With the transaction executed and state updated, the transaction has reached ",(0,i.jsx)(t.strong,{children:"soft finality"}),":\nas far as the Linea chain is concerned\u2014if considered in isolation\u2014your transaction is complete.\nA L2 like Linea doesn't work in isolation, though, as we know; so there is more work to be done\nbefore true finality is reached."]}),"\n",(0,i.jsx)(t.h2,{id:"step-4-conflation",children:"Step 4: Conflation"}),"\n",(0,i.jsxs)(t.p,{children:["The transaction's block will then be subject to ",(0,i.jsx)(t.a,{href:"/web3-feedback/technology/sequencer/conflation",children:"conflation"}),", which\ncombines two or more blocks' transaction data into a single data set (batch) that forms part of\nthe package of data passed on to Ethereum. Combining the transaction data of multiple blocks\nmeans that a single proof can be used to verify a large volume of transactions, minimizing the\ncosts of submitting proofs to L1."]}),"\n",(0,i.jsx)(t.p,{children:"Occasionally, a batch may only consist of one block, with no conflation having taken place.\nThis occurs when chain activity levels are particularly high, and the block size is larger\nthan normal."}),"\n",(0,i.jsx)(t.p,{children:"Amongst Ethereum's L2 networks, Linea is the only network that uses batch conflation."}),"\n",(0,i.jsx)(t.h2,{id:"step-5-generating-a-zk-proof-using-transaction-data",children:"Step 5: Generating a ZK proof using transaction data"}),"\n",(0,i.jsxs)(t.p,{children:["With the block that contains the transaction's trace data conflated into a batch with one or\nmore others, the only remaining task on the checklist to achieve ",(0,i.jsxs)(t.strong,{children:[(0,i.jsx)(t.em,{children:"hard"})," finality"]})," is to use\nthe transaction's data\u2014as contained in its trace\u2014to generate a proof."]}),"\n",(0,i.jsxs)(t.p,{children:["When prompted by the ",(0,i.jsx)(t.a,{href:"/web3-feedback/technology/coordinator",children:"Coordinator"}),", Linea's ",(0,i.jsx)(t.a,{href:"/web3-feedback/technology/prover/trace-expansion",children:"prover"}),"\nwill first ",(0,i.jsx)(t.strong,{children:"expand"})," the trace, preparing it for inclusion in the proof. Linea's prover employs\na two-stage method for developing the proofs that eventually get passed to L1, first developing\nan ",(0,i.jsx)(t.strong,{children:"inner proof"})," and then an ",(0,i.jsx)(t.strong,{children:"outer proof"}),"."]}),"\n",(0,i.jsxs)(t.p,{children:["The inner proof uses a combination of tools, including Arcane and Vortex, to recursively reduce\nthe proof size. For a more in-depth look at Linea's inner proof system, see ",(0,i.jsx)(t.a,{href:"https://linea.mirror.xyz/B3b1lUK8--UKZ_Qehk7SfOyvdcGbcuoyvNsSukHgOY8",children:"this article"}),"."]}),"\n",(0,i.jsxs)(t.p,{children:["Next, the outer proof is generated using the Consensys-maintained library ",(0,i.jsx)(t.a,{href:"https://docs.gnark.consensys.net/",children:(0,i.jsx)(t.code,{children:"gnark"})}),",\ncompressing the proof size even further. The resulting proof is what's known as a zk-SNARK:\nthe proofs that are eventually submitted to Ethereum."]}),"\n",(0,i.jsxs)(t.p,{children:["Since the trace data of ",(0,i.jsx)(t.em,{children:"every"})," transaction in ",(0,i.jsx)(t.em,{children:"every"})," block feeds into producing the final proof,\nthe single transaction we started with remains vital to Linea's function, well beyond the point\nat which it achieves soft finality in ",(0,i.jsx)(t.a,{href:"#step-3-transaction-data-sent-to-the-state-manager",children:"step 3"}),"."]}),"\n",(0,i.jsx)(t.h2,{id:"step-6-batch-finalization",children:"Step 6: Batch finalization"}),"\n",(0,i.jsx)(t.p,{children:"The final step in the process is to finalize the batch by submitting it to Ethereum mainnet,\nproving its computational integrity. Since the batch of conflated blocks is comprised of\ntransactions, our transaction is involved in this process as well."}),"\n",(0,i.jsx)(t.p,{children:"Let's break down the two elements submitted to L1:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["The proof, as explained ",(0,i.jsx)(t.a,{href:"#step-5-generating-a-zk-proof-using-transaction-data",children:"above"}),", and;"]}),"\n",(0,i.jsx)(t.li,{children:"Blob data, which contains L2 transaction and messaging data. Once shared to L1, blob data\ncan be used to reconstruct Linea's state and verify the contents of the proof, before it disappears\nafter 4,096 epochs (~18 days). The Linea rollup contract on L1 calls the Ethereum verifier contract\nusing blob data, determining whether or not to accept the batch as valid."}),"\n"]}),"\n",(0,i.jsx)(t.admonition,{title:"Calldata",type:"note",children:(0,i.jsxs)(t.p,{children:["Up until Linea Alpha v3, L2 transaction data was transported to L1 via ",(0,i.jsx)(t.code,{children:"calldata"})," embedded in\ntransactions. Although effective, this method was costly, and has now been replaced by\nblob-carrying transactions made possible by EIP-4844, added in Ethereum's Dencun upgrade."]})}),"\n",(0,i.jsxs)(t.p,{children:["You can also view finalized batches on Lineascan, ",(0,i.jsx)(t.a,{href:"https://lineascan.build/batches",children:"here"}),"."]}),"\n",(0,i.jsxs)(t.p,{children:["Once the proof is verified and two epochs have passed, the transaction becomes immutable history,\nand reaches ",(0,i.jsx)(t.strong,{children:"hard finality"}),". Its lifecycle is complete."]})]})}function d(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}}}]);