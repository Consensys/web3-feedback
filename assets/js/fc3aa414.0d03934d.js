"use strict";(self.webpackChunkweb3_feedback=self.webpackChunkweb3_feedback||[]).push([[6646],{28453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>a});var r=n(96540);const o={},i=r.createContext(o);function s(e){const t=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),r.createElement(i.Provider,{value:t},e.children)}},77243:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>s,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"get-started/build/quickstart/deploy","title":"Deploy your contract","description":"Create a new project and deploy and verify your contracts using Foundry","source":"@site/docs/get-started/build/quickstart/deploy.mdx","sourceDirName":"get-started/build/quickstart","slug":"/get-started/build/quickstart/deploy","permalink":"/web3-feedback/get-started/build/quickstart/deploy","draft":false,"unlisted":false,"editUrl":"https://github.com/Consensys/doc.linea/tree/main/docs/get-started/build/quickstart/deploy.mdx","tags":[],"version":"current","lastUpdatedBy":"Joel Willmore","lastUpdatedAt":1747828420000,"sidebarPosition":1,"frontMatter":{"title":"Deploy your contract","description":"Create a new project and deploy and verify your contracts using Foundry","sidebar_position":1,"pagination_next":"get-started/build/quickstart/app","pagination_prev":null,"image":"/img/socialCards/deploy-your-contract.jpg"},"sidebar":"getStartedSidebar","next":{"title":"Build your app","permalink":"/web3-feedback/get-started/build/quickstart/app"}}');var o=n(74848),i=n(28453);const s={title:"Deploy your contract",description:"Create a new project and deploy and verify your contracts using Foundry",sidebar_position:1,pagination_next:"get-started/build/quickstart/app",pagination_prev:null,image:"/img/socialCards/deploy-your-contract.jpg"},a=void 0,c={},d=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Create your project",id:"create-your-project",level:2},{value:"Deploy your contract",id:"deploy-your-contract",level:2},{value:"RPC endpoints",id:"rpc-endpoints",level:3},{value:"Get your RPC endpoint",id:"get-your-rpc-endpoint",level:4},{value:"Update <code>foundry.toml</code>",id:"update-foundrytoml",level:4},{value:"Store your private key",id:"store-your-private-key",level:3},{value:"Deploy",id:"deploy",level:3},{value:"Adjust Solidity version",id:"adjust-solidity-version",level:4},{value:"Run <code>forge create</code>",id:"run-forge-create",level:4},{value:"Verify your contract",id:"verify-your-contract",level:2},{value:"Get a Lineascan API key",id:"get-a-lineascan-api-key",level:3},{value:"Run <code>forge verify-contract</code>",id:"run-forge-verify-contract",level:4},{value:"Next steps",id:"next-steps",level:2},{value:"Help and resources",id:"help-and-resources",level:2}];function l(e){const t={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.p,{children:"Building apps on Linea needn't be complicated. Linea is Ethereum Virtual Machine (EVM)-equivalent,\nproviding a development experience identical to Ethereum, and allowing you to leverage the many\nsmart contracts, tools, and libraries created for EVM chains."}),"\n",(0,o.jsxs)(t.p,{children:["In this guide, we'll walk you through using ",(0,o.jsx)(t.a,{href:"https://book.getfoundry.sh/",children:"Foundry"})," to create a new\nproject from scratch."]}),"\n",(0,o.jsx)(t.p,{children:"This involves:"}),"\n",(0,o.jsxs)(t.ol,{children:["\n",(0,o.jsx)(t.li,{children:(0,o.jsx)(t.a,{href:"#create-your-project",children:"Creating a project"})}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.a,{href:"#deploy-your-contract",children:"Deploying"})," and then ",(0,o.jsx)(t.a,{href:"#verify-your-contract",children:"verifying"})," your contract."]}),"\n"]}),"\n",(0,o.jsxs)(t.blockquote,{children:["\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.em,{children:"Estimated time to complete: ~20 minutes."})}),"\n"]}),"\n",(0,o.jsx)(t.admonition,{title:"Hardhat",type:"note",children:(0,o.jsxs)(t.p,{children:["If you'd prefer to deploy your contract using Hardhat rather than Foundry, see our ",(0,o.jsx)(t.a,{href:"/web3-feedback/get-started/how-to/deploy-smart-contract/hardhat",children:"guide"}),"."]})}),"\n",(0,o.jsx)(t.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,o.jsxs)(t.p,{children:["A Linea-compatible wallet with some Linea Sepolia ETH. We recommend using ",(0,o.jsx)(t.a,{href:"https://metamask.io/",children:"MetaMask"}),"."]}),"\n",(0,o.jsxs)(t.p,{children:["Get some testnet ETH by heading to our ",(0,o.jsx)(t.a,{href:"https://discord.gg/linea",children:"Discord server"})," and asking in\nthe ",(0,o.jsx)(t.code,{children:"#testnet-faucet"})," channel. Our admins or other community members will help you out."]}),"\n",(0,o.jsx)(t.h2,{id:"create-your-project",children:"Create your project"}),"\n",(0,o.jsxs)(t.p,{children:["To get started, we're going to use Foundry's ",(0,o.jsx)(t.code,{children:"forge init"})," command to create a new project. ",(0,o.jsx)(t.a,{href:"https://book.getfoundry.sh/forge/",children:(0,o.jsx)(t.code,{children:"forge"})}),"\nis the Foundry CLI tool."]}),"\n",(0,o.jsxs)(t.p,{children:["Firstly, let's ",(0,o.jsx)(t.a,{href:"https://book.getfoundry.sh/getting-started/installation",children:"install Foundry"}),":"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-bash",children:"curl -L https://foundry.paradigm.xyz | bash\n"})}),"\n",(0,o.jsx)(t.p,{children:"Then initiate the new project, choosing whatever name you prefer. Make sure you're in the\ndirectory you want to create your project in:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-bash",children:"forge init linea_test_project\n"})}),"\n",(0,o.jsxs)(t.p,{children:["Foundry will build out the file structure and create a git repository. It also installs one\ndependency: ",(0,o.jsx)(t.code,{children:"forge-std"}),", the Forge Standard Library, which enables you to test your project.\nTo get more familiar with your new project, it might help to open it in a code editor and inspect\nthe files."]}),"\n",(0,o.jsxs)(t.p,{children:["You can also run ",(0,o.jsx)(t.code,{children:"forge build"})," to compile your project, and then ",(0,o.jsx)(t.code,{children:"forge test"})," to use the ",(0,o.jsx)(t.code,{children:"forge-std"}),"\ntesting library."]}),"\n",(0,o.jsx)(t.admonition,{type:"note",children:(0,o.jsxs)(t.p,{children:["If you already have a project set up, clone the project and run ",(0,o.jsx)(t.code,{children:"forge install"})," in the directory to\nuse Foundry."]})}),"\n",(0,o.jsx)(t.h2,{id:"deploy-your-contract",children:"Deploy your contract"}),"\n",(0,o.jsxs)(t.p,{children:["The default Foundry template comes with a simple placeholder contract, ",(0,o.jsx)(t.code,{children:"Counter.sol"}),". You're likely\ngoing to need something with a bit more functionality. You probably already have an idea of what\nyou want your app to do, and you might have the skills to write your own contract from scratch."]}),"\n",(0,o.jsxs)(t.p,{children:["For simplicity, we're going to stick with ",(0,o.jsx)(t.code,{children:"Counter.sol"}),", but you can use any template you want, or\nrefer to our ",(0,o.jsx)(t.a,{href:"/web3-feedback/get-started/tooling/contracts-templates/",children:"contract templates section"})," for more inspiration."]}),"\n",(0,o.jsxs)(t.p,{children:["We'll use the ",(0,o.jsx)(t.code,{children:"forge create"})," command to deploy the contract. First, we must get an RPC endpoint and\nensure we have a secure method for using a private key."]}),"\n",(0,o.jsx)(t.h3,{id:"rpc-endpoints",children:"RPC endpoints"}),"\n",(0,o.jsx)(t.h4,{id:"get-your-rpc-endpoint",children:"Get your RPC endpoint"}),"\n",(0,o.jsxs)(t.p,{children:["To deploy a contract, you need to interact with the blockchain, which means you need an ",(0,o.jsx)(t.a,{href:"/web3-feedback/get-started/tooling/node-providers/",children:"RPC  endpoint"}),"\nto send those calls to."]}),"\n",(0,o.jsxs)(t.p,{children:["To keep things simple, we're going to use the default public RPC endpoint for Linea Sepolia:\n",(0,o.jsx)(t.code,{children:"https://rpc.sepolia.linea.build"}),"."]}),"\n",(0,o.jsxs)(t.p,{children:["Public endpoints such as this one are rate limited, and if you intend to deploy your app for public\nuse, you'll need an endpoint better equipped to handle the load. We recommend heading to the\nMetaMask Developer Dashboard to get a private RPC endpoint (",(0,o.jsx)(t.a,{href:"https://docs.metamask.io/developer-tools/dashboard/get-started/create-api/",children:"instructions"}),")."]}),"\n",(0,o.jsxs)(t.p,{children:["You can also find alternative public and private RPC endpoints on our ",(0,o.jsx)(t.a,{href:"/web3-feedback/get-started/tooling/node-providers/",children:"node providers page"}),"."]}),"\n",(0,o.jsxs)(t.h4,{id:"update-foundrytoml",children:["Update ",(0,o.jsx)(t.code,{children:"foundry.toml"})]}),"\n",(0,o.jsxs)(t.p,{children:["Add the RPC endpoint to the ",(0,o.jsx)(t.code,{children:"foundry.toml"})," file:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-toml",children:'[profile.rpc-endpoints]\nsepolia = "https://rpc.sepolia.linea.build"\n'})}),"\n",(0,o.jsx)(t.h3,{id:"store-your-private-key",children:"Store your private key"}),"\n",(0,o.jsxs)(t.p,{children:["Deploying a contract requires an account's private key, which means you need to either provide it in\nthe command line when running the deployment command (not recommended) or store it securely and\naccess it with alternative methods. See the ",(0,o.jsx)(t.a,{href:"https://support.metamask.io/managing-my-wallet/secret-recovery-phrase-and-private-keys/how-to-export-an-accounts-private-key/",children:"MetaMask support guide to finding your private key"}),"."]}),"\n",(0,o.jsxs)(t.admonition,{title:"Private key security best practices",type:"tip",children:[(0,o.jsxs)(t.p,{children:["We recommend ",(0,o.jsx)(t.a,{href:"https://support.metamask.io/managing-my-wallet/accounts-and-addresses/how-to-add-accounts-in-your-wallet/",children:"creating a new account in MetaMask"}),"\nspecifically for this project, and ",(0,o.jsx)(t.a,{href:"https://support.metamask.io/managing-my-wallet/accounts-and-addresses/how-do-i-change-my-account-name-/",children:"naming it"}),'\nsomething appropriate, such as "linea-project".']}),(0,o.jsx)(t.p,{children:"Even though we're working on a testnet, it's best to behave as if real assets were at stake, and\nwork in a sandboxed context with a somewhat expendable account."})]}),"\n",(0,o.jsxs)(t.p,{children:["A standard approach is to store your private key as an environment variable in a ",(0,o.jsx)(t.code,{children:".env"})," file that\nis only stored locally (i.e. listed in ",(0,o.jsx)(t.code,{children:".gitignore"})," file). However, we're going to use Foundry's\nkeystore system to encrypt and store the private key, and then access it with a password. This\nensures that you won't accidentally expose your private key\u2014for example, in a GitHub repository."]}),"\n",(0,o.jsxs)(t.p,{children:["To do this, we'll use Foundry's ",(0,o.jsx)(t.a,{href:"https://book.getfoundry.sh/cast/",children:(0,o.jsx)(t.code,{children:"cast"})})," CLI tool; specifically,\nthe ",(0,o.jsx)(t.a,{href:"https://book.getfoundry.sh/reference/cast/cast-wallet-import",children:(0,o.jsx)(t.code,{children:"cast wallet import"})})," command."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-bash",children:"cast wallet import --interactive test-account\n"})}),"\n",(0,o.jsxs)(t.p,{children:["The ",(0,o.jsx)(t.code,{children:"--interactive"})," flag means that you'll be prompted to enter your private key in the terminal,\nfollowed by a corresponding password. ",(0,o.jsx)(t.code,{children:"test-account"})," is the name you want to give the account in\nthe keystore; choose whatever is suitable for your purposes here."]}),"\n",(0,o.jsx)(t.p,{children:"When you enter the private key and then your password, you'll get confirmation that it has been\nstored successfully:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{children:"`test-account` keystore was saved successfully. Address: <YOUR_PUBLIC_ADDRESS>\n"})}),"\n",(0,o.jsxs)(t.p,{children:["Run ",(0,o.jsx)(t.code,{children:"cast wallet list"})," to see accounts in your keystore."]}),"\n",(0,o.jsx)(t.h3,{id:"deploy",children:"Deploy"}),"\n",(0,o.jsx)(t.h4,{id:"adjust-solidity-version",children:"Adjust Solidity version"}),"\n",(0,o.jsxs)(t.p,{children:["By default, the ",(0,o.jsx)(t.code,{children:"forge init"})," command we used originally creates the ",(0,o.jsx)(t.code,{children:"Counter.sol"})," contract with the\nfollowing Solidity compiler version:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{children:"pragma solidity ^0.8.13;\n"})}),"\n",(0,o.jsxs)(t.p,{children:["This enables the compiler to use any version newer than Solidity v0.8.13. ",(0,o.jsx)(t.a,{href:"/web3-feedback/get-started/build/ethereum-differences",children:"Linea is only compatible\nwith Solidity 0.8.19 or lower"}),", so we need to make some\nadjustments."]}),"\n",(0,o.jsxs)(t.p,{children:["Add this line to ",(0,o.jsx)(t.code,{children:"[profile.default]"})," in your ",(0,o.jsx)(t.code,{children:"foundry.toml"})," file:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-toml",children:"solc-version = 0.8.19\n"})}),"\n",(0,o.jsxs)(t.p,{children:["So that your ",(0,o.jsx)(t.code,{children:"[profile.default]"}),", which is applied universally, now looks like this:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-toml",children:'[profile.default]\nsrc = "src"\nout = "out"\nlibs = ["lib"]\nsolc-version = "0.8.19"\n'})}),"\n",(0,o.jsxs)(t.h4,{id:"run-forge-create",children:["Run ",(0,o.jsx)(t.code,{children:"forge create"})]}),"\n",(0,o.jsxs)(t.p,{children:["With your RPC endpoint to hand and your private key stored more securely, you're ready to deploy\nusing ",(0,o.jsx)(t.code,{children:"forge create"}),"."]}),"\n",(0,o.jsx)(t.p,{children:"Execute this command, then enter your password to use the private key when prompted:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-bash",children:"forge create --rpc-url https://rpc.sepolia.linea.build --account test-account --broadcast src/Counter.sol:Counter\n"})}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"--rpc-url"})," is the RPC endpoint you want to use."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"--account"})," is the keystore account you want to use to deploy the contract."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"--broadcast"})," tells Forge to send the transaction to the network. You can test the command by\nomitting this flag, but you won't actually deploy the contract."]}),"\n"]}),"\n",(0,o.jsxs)(t.p,{children:["The format of the contract you want to deploy is ",(0,o.jsx)(t.code,{children:"path/to/contract.sol:ContractName"}),"; in this case,\nwe want the ",(0,o.jsx)(t.code,{children:"Counter"})," contract from ",(0,o.jsx)(t.code,{children:"src/Counter.sol"}),"."]}),"\n",(0,o.jsx)(t.p,{children:"If successful, you'll see this in the terminal:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{children:"Deployer: 0x ... // The address of the account used to deploy the contract\nDeployed to: 0x ... // The address of the deployed contract\nTransaction hash: 0x ... // The deployment transaction itself\n"})}),"\n",(0,o.jsxs)(t.p,{children:["You can copy each of these addresses and head to the ",(0,o.jsx)(t.a,{href:"https://sepolia.lineascan.build/",children:"block explorer"}),"\nto see the deployed contract."]}),"\n",(0,o.jsxs)(t.p,{children:["Make sure to copy the ",(0,o.jsx)(t.code,{children:"Deployed to"})," address, as you'll need it to verify the contract. It'll also\nbe useful in part two of this quickstart, where we'll need it to interact with the contract in our\napp."]}),"\n",(0,o.jsx)(t.h2,{id:"verify-your-contract",children:"Verify your contract"}),"\n",(0,o.jsx)(t.p,{children:"Verifying a contract makes the source code publicly visible, and also confirms to others that it\noriginated from a genuine source."}),"\n",(0,o.jsxs)(t.p,{children:["Verifying can be done with the ",(0,o.jsx)(t.code,{children:"forge verify-contract"})," command, and requires a Lineascan API key."]}),"\n",(0,o.jsx)(t.h3,{id:"get-a-lineascan-api-key",children:"Get a Lineascan API key"}),"\n",(0,o.jsxs)(t.p,{children:["Get a Lineascan API key by ",(0,o.jsx)(t.a,{href:"https://lineascan.build/myapikey",children:"creating an account"}),"."]}),"\n",(0,o.jsxs)(t.p,{children:["Since it's best practice to avoid using API keys in the command line, add the API key to your\n",(0,o.jsx)(t.code,{children:".env"})," file:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{children:"LINEASCAN_API_KEY=YOUR_LINEASCAN_API_KEY\n"})}),"\n",(0,o.jsxs)(t.p,{children:["Then modify the ",(0,o.jsx)(t.code,{children:"foundry.toml"})," configuration file to include the Lineascan API key, pulling it from\nthe ",(0,o.jsx)(t.code,{children:".env"})," file:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-toml",children:'[etherscan]\nlinea-sepolia = { key = "${LINEASCAN_API_KEY}" }\n'})}),"\n",(0,o.jsxs)(t.h4,{id:"run-forge-verify-contract",children:["Run ",(0,o.jsx)(t.code,{children:"forge verify-contract"})]}),"\n",(0,o.jsx)(t.p,{children:"Execute this command:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-bash",children:"forge verify-contract --chain linea-sepolia YOUR_CONTRACT_ADDRESS path_to_contract:contract_name --watch\n"})}),"\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.code,{children:"--watch"})," automatically runs the ",(0,o.jsx)(t.code,{children:"forge verify-check"})," command to report verification status in the\nterminal until verification is complete."]}),"\n",(0,o.jsxs)(t.admonition,{type:"note",children:[(0,o.jsxs)(t.p,{children:["You can also complete verification at the same time as deployment by adding the ",(0,o.jsx)(t.code,{children:"--verify"})," and\n",(0,o.jsx)(t.code,{children:"--verifier-url"})," flags to the ",(0,o.jsx)(t.code,{children:"forge create"})," command, and providing your Lineascan API key."]}),(0,o.jsx)(t.p,{children:"For example:"}),(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-bash",children:"forge create --rpc-url https://rpc.sepolia.linea.build --account test-account --broadcast --verify --verifier-url https://api-sepolia.lineascan.build/api --etherscan-api-key LINEASCAN_API_KEY src/Counter.sol:Counter\n"})})]}),"\n",(0,o.jsx)(t.p,{children:"Now you've successfully deployed and verified your contract! It's recorded on the blockchain and\nready to receive calls from your app."}),"\n",(0,o.jsx)(t.h2,{id:"next-steps",children:"Next steps"}),"\n",(0,o.jsxs)(t.p,{children:["Proceed to ",(0,o.jsx)(t.a,{href:"/web3-feedback/get-started/build/quickstart/app",children:"part two"})," of this quickstart, where we'll build a simple web app for\ninteracting with the counter contract."]}),"\n",(0,o.jsx)(t.h2,{id:"help-and-resources",children:"Help and resources"}),"\n",(0,o.jsxs)(t.p,{children:["If you get stuck at any point in this guide, head to our ",(0,o.jsx)(t.a,{href:"https://discord.gg/linea",children:"Discord"})," and\nvisit the ",(0,o.jsx)(t.code,{children:"#developer-chat"})," channel."]}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.a,{href:"https://book.getfoundry.sh/",children:"Foundry documentation"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsx)(t.li,{children:(0,o.jsx)(t.a,{href:"https://book.getfoundry.sh/forge/",children:"Foundry CLI"})}),"\n",(0,o.jsx)(t.li,{children:(0,o.jsx)(t.a,{href:"https://book.getfoundry.sh/cast/",children:"Foundry Cast"})}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(t.li,{children:(0,o.jsx)(t.a,{href:"https://sepolia.lineascan.build/",children:"Linea Sepolia block explorer"})}),"\n",(0,o.jsx)(t.li,{children:(0,o.jsx)(t.a,{href:"/web3-feedback/get-started/tooling/node-providers/",children:"Node providers"})}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}}}]);