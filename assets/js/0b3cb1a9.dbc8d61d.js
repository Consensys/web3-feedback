"use strict";(self.webpackChunkweb3_feedback=self.webpackChunkweb3_feedback||[]).push([[2406],{28453:(e,s,n)=>{n.d(s,{R:()=>l,x:()=>t});var a=n(96540);const r={},i=a.createContext(r);function l(e){const s=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function t(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),a.createElement(i.Provider,{value:s},e.children)}},53350:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>d,contentTitle:()=>t,default:()=>o,frontMatter:()=>l,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"api/linea-smart-contracts/messageservice/l1/l1messagemanager","title":"L1MessageManager","description":"rollingHashes","source":"@site/docs/api/linea-smart-contracts/messageservice/l1/l1messagemanager.mdx","sourceDirName":"api/linea-smart-contracts/messageservice/l1","slug":"/api/linea-smart-contracts/messageservice/l1/l1messagemanager","permalink":"/web3-feedback/api/linea-smart-contracts/messageservice/l1/l1messagemanager","draft":false,"unlisted":false,"editUrl":"https://github.com/Consensys/doc.linea/tree/main/docs/api/linea-smart-contracts/messageservice/l1/l1messagemanager.mdx","tags":[],"version":"current","lastUpdatedBy":"Joel Willmore","lastUpdatedAt":1746010636000,"frontMatter":{},"sidebar":"apiSidebar","previous":{"title":"MessageServiceBase","permalink":"/web3-feedback/api/linea-smart-contracts/messageservice/messageservicebase"},"next":{"title":"L1MessageService","permalink":"/web3-feedback/api/linea-smart-contracts/messageservice/l1/l1messageservice"}}');var r=n(74848),i=n(28453);const l={},t="L1MessageManager",d={},c=[{value:"rollingHashes",id:"rollinghashes",level:3},{value:"_messageClaimedBitMap",id:"_messageclaimedbitmap",level:3},{value:"l2MerkleRootsDepths",id:"l2merklerootsdepths",level:3},{value:"_addRollingHash",id:"_addrollinghash",level:3},{value:"Parameters",id:"parameters",level:4},{value:"_setL2L1MessageToClaimed",id:"_setl2l1messagetoclaimed",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"_addL2MerkleRoots",id:"_addl2merkleroots",level:3},{value:"Parameters",id:"parameters-2",level:4},{value:"_anchorL2MessagingBlocks",id:"_anchorl2messagingblocks",level:3},{value:"Parameters",id:"parameters-3",level:4},{value:"isMessageClaimed",id:"ismessageclaimed",level:3},{value:"Parameters",id:"parameters-4",level:4},{value:"Return Values",id:"return-values",level:4}];function h(e){const s={code:"code",em:"em",h1:"h1",h3:"h3",h4:"h4",header:"header",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.header,{children:(0,r.jsx)(s.h1,{id:"l1messagemanager",children:(0,r.jsx)(s.code,{children:"L1MessageManager"})})}),"\n",(0,r.jsx)(s.h3,{id:"rollinghashes",children:"rollingHashes"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-solidity",children:"mapping(uint256 => bytes32) rollingHashes\n"})}),"\n",(0,r.jsx)(s.p,{children:"Contains the L1 to L2 messaging rolling hashes mapped to message number computed on L1."}),"\n",(0,r.jsx)(s.h3,{id:"_messageclaimedbitmap",children:"_messageClaimedBitMap"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-solidity",children:"struct BitMaps.BitMap _messageClaimedBitMap\n"})}),"\n",(0,r.jsx)(s.p,{children:"This maps which message numbers have been claimed to prevent duplicate claiming."}),"\n",(0,r.jsx)(s.h3,{id:"l2merklerootsdepths",children:"l2MerkleRootsDepths"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-solidity",children:"mapping(bytes32 => uint256) l2MerkleRootsDepths\n"})}),"\n",(0,r.jsx)(s.p,{children:"Contains the L2 messages Merkle roots mapped to their tree depth."}),"\n",(0,r.jsx)(s.h3,{id:"_addrollinghash",children:"_addRollingHash"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-solidity",children:"function _addRollingHash(uint256 _messageNumber, bytes32 _messageHash) internal\n"})}),"\n",(0,r.jsx)(s.p,{children:"Take an existing message hash, calculates the rolling hash and stores at the message number."}),"\n",(0,r.jsx)(s.h4,{id:"parameters",children:"Parameters"}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:"Name"}),(0,r.jsx)(s.th,{children:"Type"}),(0,r.jsx)(s.th,{children:"Description"})]})}),(0,r.jsxs)(s.tbody,{children:[(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"_messageNumber"}),(0,r.jsx)(s.td,{children:"uint256"}),(0,r.jsx)(s.td,{children:"The current message number being sent."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"_messageHash"}),(0,r.jsx)(s.td,{children:"bytes32"}),(0,r.jsx)(s.td,{children:"The hash of the message being sent."})]})]})]}),"\n",(0,r.jsx)(s.h3,{id:"_setl2l1messagetoclaimed",children:"_setL2L1MessageToClaimed"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-solidity",children:"function _setL2L1MessageToClaimed(uint256 _messageNumber) internal\n"})}),"\n",(0,r.jsx)(s.p,{children:"Set the L2->L1 message as claimed when a user claims a message on L1."}),"\n",(0,r.jsx)(s.h4,{id:"parameters-1",children:"Parameters"}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:"Name"}),(0,r.jsx)(s.th,{children:"Type"}),(0,r.jsx)(s.th,{children:"Description"})]})}),(0,r.jsx)(s.tbody,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"_messageNumber"}),(0,r.jsx)(s.td,{children:"uint256"}),(0,r.jsx)(s.td,{children:"The message number on L2."})]})})]}),"\n",(0,r.jsx)(s.h3,{id:"_addl2merkleroots",children:"_addL2MerkleRoots"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-solidity",children:"function _addL2MerkleRoots(bytes32[] _newRoots, uint256 _treeDepth) internal\n"})}),"\n",(0,r.jsx)(s.p,{children:"Add the L2 Merkle roots to the storage."}),"\n",(0,r.jsxs)(s.p,{children:["_This function is called during block finalization.\nThe ",(0,r.jsx)(s.em,{children:"treeDepth does not need to be checked to be non-zero as it is,\nalready enforced to be non-zero in the circuit, and used in the proof's public input."})]}),"\n",(0,r.jsx)(s.h4,{id:"parameters-2",children:"Parameters"}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:"Name"}),(0,r.jsx)(s.th,{children:"Type"}),(0,r.jsx)(s.th,{children:"Description"})]})}),(0,r.jsxs)(s.tbody,{children:[(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"_newRoots"}),(0,r.jsx)(s.td,{children:"bytes32[]"}),(0,r.jsx)(s.td,{children:"New L2 Merkle roots."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"_treeDepth"}),(0,r.jsx)(s.td,{children:"uint256"}),(0,r.jsx)(s.td,{})]})]})]}),"\n",(0,r.jsx)(s.h3,{id:"_anchorl2messagingblocks",children:"_anchorL2MessagingBlocks"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-solidity",children:"function _anchorL2MessagingBlocks(bytes _l2MessagingBlocksOffsets, uint256 _currentL2BlockNumber) internal\n"})}),"\n",(0,r.jsx)(s.p,{children:"Emit an event for each L2 block containing L2->L1 messages."}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.em,{children:"This function is called during block finalization."})}),"\n",(0,r.jsx)(s.h4,{id:"parameters-3",children:"Parameters"}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:"Name"}),(0,r.jsx)(s.th,{children:"Type"}),(0,r.jsx)(s.th,{children:"Description"})]})}),(0,r.jsxs)(s.tbody,{children:[(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"_l2MessagingBlocksOffsets"}),(0,r.jsx)(s.td,{children:"bytes"}),(0,r.jsx)(s.td,{children:"Is a sequence of uint16 values, where each value plus the last finalized L2 block number. indicates which L2 blocks have L2->L1 messages."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"_currentL2BlockNumber"}),(0,r.jsx)(s.td,{children:"uint256"}),(0,r.jsx)(s.td,{children:"Last L2 block number finalized on L1."})]})]})]}),"\n",(0,r.jsx)(s.h3,{id:"ismessageclaimed",children:"isMessageClaimed"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-solidity",children:"function isMessageClaimed(uint256 _messageNumber) external view returns (bool isClaimed)\n"})}),"\n",(0,r.jsx)(s.p,{children:"Checks if the L2->L1 message is claimed or not."}),"\n",(0,r.jsx)(s.h4,{id:"parameters-4",children:"Parameters"}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:"Name"}),(0,r.jsx)(s.th,{children:"Type"}),(0,r.jsx)(s.th,{children:"Description"})]})}),(0,r.jsx)(s.tbody,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"_messageNumber"}),(0,r.jsx)(s.td,{children:"uint256"}),(0,r.jsx)(s.td,{children:"The message number on L2."})]})})]}),"\n",(0,r.jsx)(s.h4,{id:"return-values",children:"Return Values"}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:"Name"}),(0,r.jsx)(s.th,{children:"Type"}),(0,r.jsx)(s.th,{children:"Description"})]})}),(0,r.jsx)(s.tbody,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"isClaimed"}),(0,r.jsx)(s.td,{children:"bool"}),(0,r.jsx)(s.td,{children:"Returns whether or not the message with _messageNumber has been claimed."})]})})]})]})}function o(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}}}]);