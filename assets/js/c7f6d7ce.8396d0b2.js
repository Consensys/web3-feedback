"use strict";(self.webpackChunkweb3_feedback=self.webpackChunkweb3_feedback||[]).push([[1870],{19141:(e,r,s)=>{s.r(r),s.d(r,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>i,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"api/linea-smart-contracts/interfaces/l1/il1messageservice","title":"IL1MessageService","description":"ClaimMessageWithProofParams","source":"@site/docs/api/linea-smart-contracts/interfaces/l1/il1messageservice.mdx","sourceDirName":"api/linea-smart-contracts/interfaces/l1","slug":"/api/linea-smart-contracts/interfaces/l1/il1messageservice","permalink":"/web3-feedback/api/linea-smart-contracts/interfaces/l1/il1messageservice","draft":false,"unlisted":false,"editUrl":"https://github.com/Consensys/doc.linea/tree/main/docs/api/linea-smart-contracts/interfaces/l1/il1messageservice.mdx","tags":[],"version":"current","lastUpdatedBy":"Joel Willmore","lastUpdatedAt":1746010655000,"frontMatter":{},"sidebar":"apiSidebar","previous":{"title":"IL1MessageManagerV1","permalink":"/web3-feedback/api/linea-smart-contracts/interfaces/l1/il1messagemanagerv1"},"next":{"title":"ILineaRollup","permalink":"/web3-feedback/api/linea-smart-contracts/interfaces/l1/ilinearollup"}}');var a=s(74848),n=s(28453);const i={},l="IL1MessageService",o={},c=[{value:"ClaimMessageWithProofParams",id:"claimmessagewithproofparams",level:3},{value:"Parameters",id:"parameters",level:4},{value:"L2MerkleRootDoesNotExist",id:"l2merklerootdoesnotexist",level:3},{value:"InvalidMerkleProof",id:"invalidmerkleproof",level:3},{value:"ProofLengthDifferentThanMerkleDepth",id:"prooflengthdifferentthanmerkledepth",level:3},{value:"claimMessageWithProof",id:"claimmessagewithproof",level:3},{value:"Parameters",id:"parameters-1",level:4}];function d(e){const r={code:"code",em:"em",h1:"h1",h3:"h3",h4:"h4",header:"header",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,n.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(r.header,{children:(0,a.jsx)(r.h1,{id:"il1messageservice",children:(0,a.jsx)(r.code,{children:"IL1MessageService"})})}),"\n",(0,a.jsx)(r.h3,{id:"claimmessagewithproofparams",children:"ClaimMessageWithProofParams"}),"\n",(0,a.jsx)(r.h4,{id:"parameters",children:"Parameters"}),"\n",(0,a.jsx)(r.table,{children:(0,a.jsx)(r.thead,{children:(0,a.jsxs)(r.tr,{children:[(0,a.jsx)(r.th,{children:"Name"}),(0,a.jsx)(r.th,{children:"Type"}),(0,a.jsx)(r.th,{children:"Description"})]})})}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-solidity",children:"struct ClaimMessageWithProofParams {\n  bytes32[] proof;\n  uint256 messageNumber;\n  uint32 leafIndex;\n  address from;\n  address to;\n  uint256 fee;\n  uint256 value;\n  address payable feeRecipient;\n  bytes32 merkleRoot;\n  bytes data;\n}\n"})}),"\n",(0,a.jsx)(r.h3,{id:"l2merklerootdoesnotexist",children:"L2MerkleRootDoesNotExist"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-solidity",children:"error L2MerkleRootDoesNotExist()\n"})}),"\n",(0,a.jsx)(r.p,{children:(0,a.jsx)(r.em,{children:"Thrown when L2 Merkle root does not exist."})}),"\n",(0,a.jsx)(r.h3,{id:"invalidmerkleproof",children:"InvalidMerkleProof"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-solidity",children:"error InvalidMerkleProof()\n"})}),"\n",(0,a.jsx)(r.p,{children:(0,a.jsx)(r.em,{children:"Thrown when the Merkle proof is invalid."})}),"\n",(0,a.jsx)(r.h3,{id:"prooflengthdifferentthanmerkledepth",children:"ProofLengthDifferentThanMerkleDepth"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-solidity",children:"error ProofLengthDifferentThanMerkleDepth(uint256 actual, uint256 expected)\n"})}),"\n",(0,a.jsx)(r.p,{children:(0,a.jsx)(r.em,{children:"Thrown when Merkle depth doesn't match proof length."})}),"\n",(0,a.jsx)(r.h3,{id:"claimmessagewithproof",children:"claimMessageWithProof"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-solidity",children:"function claimMessageWithProof(struct IL1MessageService.ClaimMessageWithProofParams _params) external\n"})}),"\n",(0,a.jsx)(r.p,{children:"Claims and delivers a cross-chain message using a Merkle proof."}),"\n",(0,a.jsx)(r.p,{children:(0,a.jsx)(r.em,{children:"if tree depth is empty, it will revert with L2MerkleRootDoesNotExist.\nif tree depth is different than proof size, it will revert with ProofLengthDifferentThanMerkleDepth."})}),"\n",(0,a.jsx)(r.h4,{id:"parameters-1",children:"Parameters"}),"\n",(0,a.jsxs)(r.table,{children:[(0,a.jsx)(r.thead,{children:(0,a.jsxs)(r.tr,{children:[(0,a.jsx)(r.th,{children:"Name"}),(0,a.jsx)(r.th,{children:"Type"}),(0,a.jsx)(r.th,{children:"Description"})]})}),(0,a.jsx)(r.tbody,{children:(0,a.jsxs)(r.tr,{children:[(0,a.jsx)(r.td,{children:"_params"}),(0,a.jsx)(r.td,{children:"struct IL1MessageService.ClaimMessageWithProofParams"}),(0,a.jsx)(r.td,{children:"Collection of claim data with proof and supporting data."})]})})]})]})}function h(e={}){const{wrapper:r}={...(0,n.R)(),...e.components};return r?(0,a.jsx)(r,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},28453:(e,r,s)=>{s.d(r,{R:()=>i,x:()=>l});var t=s(96540);const a={},n=t.createContext(a);function i(e){const r=t.useContext(n);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function l(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),t.createElement(n.Provider,{value:r},e.children)}}}]);