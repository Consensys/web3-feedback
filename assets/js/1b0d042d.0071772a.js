"use strict";(self.webpackChunkweb3_feedback=self.webpackChunkweb3_feedback||[]).push([[4172],{28453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>i});var a=n(96540);const r={},o=a.createContext(r);function s(e){const t=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),a.createElement(o.Provider,{value:t},e.children)}},47018:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>l,default:()=>f,frontMatter:()=>c,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"get-started/how-to/verify-smart-contract/foundry","title":"Foundry","description":"To verify your Foundry contracts, you can use Foundry\'s verify-contract","source":"@site/docs/get-started/how-to/verify-smart-contract/foundry.mdx","sourceDirName":"get-started/how-to/verify-smart-contract","slug":"/get-started/how-to/verify-smart-contract/foundry","permalink":"/web3-feedback/get-started/how-to/verify-smart-contract/foundry","draft":false,"unlisted":false,"editUrl":"https://github.com/Consensys/doc.linea/tree/main/docs/get-started/how-to/verify-smart-contract/foundry.mdx","tags":[],"version":"current","lastUpdatedBy":"Joel Willmore","lastUpdatedAt":1746010636000,"frontMatter":{"title":"Foundry","image":"/img/socialCards/foundry.jpg"},"sidebar":"getStartedSidebar","previous":{"title":"Atlas","permalink":"/web3-feedback/get-started/how-to/verify-smart-contract/atlas"},"next":{"title":"Hardhat","permalink":"/web3-feedback/get-started/how-to/verify-smart-contract/hardhat"}}');var r=n(74848),o=n(28453),s=n(65537),i=n(79329);const c={title:"Foundry",image:"/img/socialCards/foundry.jpg"},l=void 0,u={},d=[{value:"Verify your smart contract",id:"verify-your-smart-contract",level:2},{value:"Verify a contract that has already been deployed",id:"verify-a-contract-that-has-already-been-deployed",level:3},{value:"Verify a contract upon creation",id:"verify-a-contract-upon-creation",level:3},{value:"Using <code>.env</code> and <code>foundry.toml</code> to store Lineascan information",id:"using-env-and-foundrytoml-to-store-lineascan-information",level:2}];function h(e){const t={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(t.p,{children:["To verify your Foundry contracts, you can use Foundry's ",(0,r.jsx)(t.a,{href:"https://book.getfoundry.sh/reference/forge/forge-verify-contract",children:(0,r.jsx)(t.code,{children:"verify-contract"})}),"\nto verify contracts on Lineascan."]}),"\n",(0,r.jsxs)(t.p,{children:["You'll need to get a Lineascan (Linea instance of Etherscan) API key by creating an account at\n",(0,r.jsx)(t.a,{href:"https://lineascan.build/myapikey",children:"https://lineascan.build/myapikey"}),"."]}),"\n",(0,r.jsx)(t.h2,{id:"verify-your-smart-contract",children:"Verify your smart contract"}),"\n",(0,r.jsx)(t.admonition,{type:"note",children:(0,r.jsxs)(t.p,{children:["These instructions verify using the Linea instance of Etherscan, which currently doesn't support\nYul. If you would like to verify using Blockscout, please use the ",(0,r.jsx)(t.a,{href:"/web3-feedback/get-started/build/block-explorers",children:"Blockscout API URL for the required network"}),"."]})}),"\n",(0,r.jsx)(t.h3,{id:"verify-a-contract-that-has-already-been-deployed",children:"Verify a contract that has already been deployed"}),"\n",(0,r.jsx)(t.p,{children:"If you want to verify a contract that has already been deployed, you can use the following commands:"}),"\n",(0,r.jsxs)(s.A,{children:[(0,r.jsx)(i.A,{value:"Mainnet",label:"Mainnet",default:!0,children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"forge verify-contract --etherscan-api-key LINEASCAN_API_KEY --verifier-url https://api.lineascan.build/api CONTRACT_ADDRESS path_to_contract:contract_name --watch\n"})})}),(0,r.jsx)(i.A,{value:"Testnet",label:"Testnet",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"forge verify-contract --etherscan-api-key LINEASCAN_API_KEY --verifier-url https://api-sepolia.lineascan.build/api CONTRACT_ADDRESS path_to_contract:contract_name --watch\n"})})})]}),"\n",(0,r.jsx)(t.p,{children:"You should see something a little like this:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:'Start verifying contract 0x8de6e9b6c774c8b7aba587ed84e5ad0a45837b16 deployed on mainnet\n\nSubmitting verification for [src/Counter.sol:Counter] "0x8dE6e9b6c774c8B7AbA587ED84E5AD0A45837b16".\nSubmitted contract for verification:\n        Response: OK\n        GUID: `ynnfyvwcqev9i5xr1urdqt9kdwx4zkurvpu7rgh2ywmyp22dpy`\n        URL:\n        https://etherscan.io/address/0x8de6e9b6c774c8b7aba587ed84e5ad0a45837b16\nContract verification status:\nResponse: `NOTOK`\nDetails: `Pending in queue`\nContract verification status:\nResponse: `OK`\nDetails: `Pass - Verified`\nContract successfully verified\n'})}),"\n",(0,r.jsx)(t.h3,{id:"verify-a-contract-upon-creation",children:"Verify a contract upon creation"}),"\n",(0,r.jsx)(t.p,{children:"If you want to verify a contract as it is being deployed for the first time, you can use the following commands:"}),"\n",(0,r.jsxs)(s.A,{children:[(0,r.jsx)(i.A,{value:"Mainnet",label:"Mainnet",default:!0,children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"forge create --rpc-url https://linea.infura.io/v3/INFURA_API_KEY src/Counter.sol:Counter --private-key YOUR_PRIVATE_KEY --verify --verifier-url https://api.lineascan.build/api --etherscan-api-key LINEASCAN_API_KEY\n"})})}),(0,r.jsx)(i.A,{value:"Testnet",label:"Testnet",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"forge create --rpc-url https://linea-sepolia.infura.io/v3/INFURA_API_KEY src/Counter.sol:Counter --private-key YOUR_PRIVATE_KEY --verify --verifier-url https://api-sepolia.lineascan.build/api --etherscan-api-key LINEASCAN_API_KEY\n"})})})]}),"\n",(0,r.jsxs)(t.p,{children:["You can check that it was verified correctly by navigating to the ",(0,r.jsx)(t.a,{href:"https://sepolia.lineascan.build/",children:"testnet block explorer"})," or the ",(0,r.jsx)(t.a,{href:"https://lineascan.build/",children:"mainnet block explorer"})," and pasting in the deployed contract address."]}),"\n",(0,r.jsxs)(t.h2,{id:"using-env-and-foundrytoml-to-store-lineascan-information",children:["Using ",(0,r.jsx)(t.code,{children:".env"})," and ",(0,r.jsx)(t.code,{children:"foundry.toml"})," to store Lineascan information"]}),"\n",(0,r.jsxs)(t.p,{children:["If you don't want to paste your keys inline and have multiple Etherscan API keys to manage, you can use\nthe ",(0,r.jsx)(t.code,{children:".env"})," and ",(0,r.jsx)(t.code,{children:"foundry.toml"})," files to set up custom configurations."]}),"\n",(0,r.jsxs)(t.p,{children:["These steps assume you stored your secret keys in a ",(0,r.jsx)(t.code,{children:".env"})," file. which you can read more about\n",(0,r.jsx)(t.a,{href:"/web3-feedback/get-started/how-to/deploy-smart-contract/foundry#deploy-a-smart-contract-using-a-env-file",children:"in the Foundry deployment instructions"}),"."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"LINEASCAN_API_KEY=YOUR_LINEASCAN_API_KEY\n"})}),"\n",(0,r.jsx)(t.p,{children:"Then, run:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"source .env\n"})}),"\n",(0,r.jsxs)(t.p,{children:["Finally, modify ",(0,r.jsx)(t.code,{children:"foundry.toml"})," to include the Etherscan configurations:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:'[etherscan]\nlinea-sepolia = { key = "${LINEASCAN_API_KEY}", chain = 59141, url = "https://api-sepolia.lineascan.build/api" }\nlinea-mainnet = { key = "${LINEASCAN_API_KEY}", chain = 59144, url = "https://api.lineascan.build/api" }\n'})}),"\n",(0,r.jsx)(t.p,{children:"Then, to verify your smart contracts, you can simply run:"}),"\n",(0,r.jsxs)(s.A,{children:[(0,r.jsx)(i.A,{value:"Mainnet",label:"Mainnet",default:!0,children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"forge verify-contract --chain linea-mainnet YOUR_CONTRACT_ADDRESS path_to_contract:contract_name --watch\n"})})}),(0,r.jsx)(i.A,{value:"Testnet",label:"Testnet",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"forge verify-contract --chain linea-sepolia YOUR_CONTRACT_ADDRESS path_to_contract:contract_name --watch\n"})})})]}),"\n",(0,r.jsx)(t.admonition,{type:"info",children:(0,r.jsxs)(t.p,{children:["Learn more about different configurations for verifying your smart contracts using the\n",(0,r.jsx)(t.a,{href:"https://book.getfoundry.sh/reference/forge/forge-verify-contract#forge-verify-contract",children:(0,r.jsx)(t.code,{children:"forge verify-contract"})}),"\ncommand and the ",(0,r.jsx)(t.a,{href:"https://book.getfoundry.sh/forge/deploying",children:"Forge deployment instructions"}),"."]})})]})}function f(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},65537:(e,t,n)=>{n.d(t,{A:()=>A});var a=n(96540),r=n(34164),o=n(65627),s=n(56347),i=n(50372),c=n(30604),l=n(11861),u=n(78749);function d(e){return a.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:t,children:n}=e;return(0,a.useMemo)((()=>{const e=t??function(e){return d(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:r}}=e;return{value:t,label:n,attributes:a,default:r}}))}(n);return function(e){const t=(0,l.XI)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function f(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function p(e){let{queryString:t=!1,groupId:n}=e;const r=(0,s.W6)(),o=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,c.aZ)(o),(0,a.useCallback)((e=>{if(!o)return;const t=new URLSearchParams(r.location.search);t.set(o,e),r.replace({...r.location,search:t.toString()})}),[o,r])]}function y(e){const{defaultValue:t,queryString:n=!1,groupId:r}=e,o=h(e),[s,c]=(0,a.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!f({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:o}))),[l,d]=p({queryString:n,groupId:r}),[y,m]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[r,o]=(0,u.Dv)(n);return[r,(0,a.useCallback)((e=>{n&&o.set(e)}),[n,o])]}({groupId:r}),b=(()=>{const e=l??y;return f({value:e,tabValues:o})?e:null})();(0,i.A)((()=>{b&&c(b)}),[b]);return{selectedValue:s,selectValue:(0,a.useCallback)((e=>{if(!f({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);c(e),d(e),m(e)}),[d,m,o]),tabValues:o}}var m=n(9136);const b={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var v=n(74848);function g(e){let{className:t,block:n,selectedValue:a,selectValue:s,tabValues:i}=e;const c=[],{blockElementScrollPositionUntilNextRender:l}=(0,o.a_)(),u=e=>{const t=e.currentTarget,n=c.indexOf(t),r=i[n].value;r!==a&&(l(t),s(r))},d=e=>{let t=null;switch(e.key){case"Enter":u(e);break;case"ArrowRight":{const n=c.indexOf(e.currentTarget)+1;t=c[n]??c[0];break}case"ArrowLeft":{const n=c.indexOf(e.currentTarget)-1;t=c[n]??c[c.length-1];break}}t?.focus()};return(0,v.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.A)("tabs",{"tabs--block":n},t),children:i.map((e=>{let{value:t,label:n,attributes:o}=e;return(0,v.jsx)("li",{role:"tab",tabIndex:a===t?0:-1,"aria-selected":a===t,ref:e=>{c.push(e)},onKeyDown:d,onClick:u,...o,className:(0,r.A)("tabs__item",b.tabItem,o?.className,{"tabs__item--active":a===t}),children:n??t},t)}))})}function x(e){let{lazy:t,children:n,selectedValue:o}=e;const s=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=s.find((e=>e.props.value===o));return e?(0,a.cloneElement)(e,{className:(0,r.A)("margin-top--md",e.props.className)}):null}return(0,v.jsx)("div",{className:"margin-top--md",children:s.map(((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==o})))})}function j(e){const t=y(e);return(0,v.jsxs)("div",{className:(0,r.A)("tabs-container",b.tabList),children:[(0,v.jsx)(g,{...t,...e}),(0,v.jsx)(x,{...t,...e})]})}function A(e){const t=(0,m.A)();return(0,v.jsx)(j,{...e,children:d(e.children)},String(t))}},79329:(e,t,n)=>{n.d(t,{A:()=>s});n(96540);var a=n(34164);const r={tabItem:"tabItem_Ymn6"};var o=n(74848);function s(e){let{children:t,hidden:n,className:s}=e;return(0,o.jsx)("div",{role:"tabpanel",className:(0,a.A)(r.tabItem,s),hidden:n,children:t})}}}]);