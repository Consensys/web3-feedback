"use strict";(self.webpackChunkweb3_feedback=self.webpackChunkweb3_feedback||[]).push([[442],{28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var i=t(96540);const r={},l=i.createContext(r);function a(e){const n=i.useContext(l);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(l.Provider,{value:n},e.children)}},97358:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>s});const i=JSON.parse('{"id":"get-started/how-to/finalized-block","title":"Retrieve finalized L2 blocks","description":"A finalized L2 block is a block on an L2 blockchain (Linea) that has been confirmed and validated","source":"@site/docs/get-started/how-to/finalized-block.mdx","sourceDirName":"get-started/how-to","slug":"/get-started/how-to/finalized-block","permalink":"/web3-feedback/get-started/how-to/finalized-block","draft":false,"unlisted":false,"editUrl":"https://github.com/Consensys/doc.linea/tree/main/docs/get-started/how-to/finalized-block.mdx","tags":[],"version":"current","lastUpdatedBy":"Joel Willmore","lastUpdatedAt":1746010655000,"frontMatter":{"title":"Retrieve finalized L2 blocks","image":"/img/socialCards/retrieve-finalized-l2-blocks.jpg"},"sidebar":"getStartedSidebar","previous":{"title":"Deploy a Linea subdomain","permalink":"/web3-feedback/get-started/how-to/deploy-subdomain"},"next":{"title":"Run a Linea node","permalink":"/web3-feedback/get-started/how-to/run-a-node/"}}');var r=t(74848),l=t(28453);const a={title:"Retrieve finalized L2 blocks",image:"/img/socialCards/retrieve-finalized-l2-blocks.jpg"},o=void 0,c={},s=[{value:"Use the <code>finalized</code> tag",id:"use-the-finalized-tag",level:2},{value:"Supported methods",id:"supported-methods",level:3},{value:"Query the rollup contract",id:"query-the-rollup-contract",level:2},{value:"Prerequisites",id:"prerequisites",level:3},{value:"Create the script",id:"create-the-script",level:3}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,l.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"A finalized L2 block is a block on an L2 blockchain (Linea) that has been confirmed and validated\nby the L1 blockchain (Ethereum), ensuring its immutability and security."}),"\n",(0,r.jsx)(n.p,{children:"There are two methods to obtain the current finalized block:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsxs)(n.a,{href:"#use-the-finalized-tag",children:["Use the ",(0,r.jsx)(n.code,{children:"finalized"})," block parameter tag"]})," in JSON-RPC API calls."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"#query-the-rollup-contract",children:"Query the Linea L1 rollup contract"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(n.h2,{id:"use-the-finalized-tag",children:["Use the ",(0,r.jsx)(n.code,{children:"finalized"})," tag"]}),"\n",(0,r.jsxs)(n.p,{children:["Use the ",(0,r.jsx)(n.code,{children:"finalized"})," tag in API calls to specify a block that has been confirmed by the L1\nnetwork. For example, here the ",(0,r.jsx)(n.code,{children:"eth_getBlockByNumber"})," method returns information about the current\nfinalized block:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'curl https://rpc.linea.build \\\n  -X POST \\\n  -H "Content-Type: application/json" \\\n  -d \'{"jsonrpc":"2.0","method":"eth_getBlockByNumber","params":["finalized",false],"id":1}\'\n'})}),"\n",(0,r.jsx)(n.h3,{id:"supported-methods",children:"Supported methods"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"finalized"})," tag is supported by all applicable JSON-RPC API methods on Linea Mainnet and Linea\nSepolia with the exception of ",(0,r.jsx)(n.code,{children:"eth_call"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"query-the-rollup-contract",children:"Query the rollup contract"}),"\n",(0,r.jsxs)(n.p,{children:["Using the ",(0,r.jsx)(n.code,{children:"finalized"})," tag in JSON-RPC API calls is recommended. As an alternative, you can query\nthe ",(0,r.jsx)(n.a,{href:"https://etherscan.io/address/0xd19d4b5d358258f05d7b411e21a1460d11b0876f#readProxyContract",children:"Linea L1 rollup contract"}),"\nto retrieve the value of the current finalized L2 block number stored in the ",(0,r.jsx)(n.code,{children:"currentL2BlockNumber"}),"\nvariable."]}),"\n",(0,r.jsx)(n.h3,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://nodejs.org/en",children:"Download and install Node.js"})}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"create-the-script",children:"Create the script"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["In your project folder, initialize the project and install the ",(0,r.jsx)(n.code,{children:"web3"})," package:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npm init -y\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npm install web3\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Create a JavaScript file (for example ",(0,r.jsx)(n.code,{children:"index.js"}),") and copy the following code:"]}),"\n",(0,r.jsx)(n.admonition,{type:"info",children:(0,r.jsx)(n.p,{children:"Update the Infura endpoint with your API key, or add a different RPC provider."})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-JavaScript",metastring:'title="index.js"',children:'const { Web3 } = require("web3")\n\n// Connect to an Ethereum node (e.g., Infura)\nconst web3 = new Web3(\n  new Web3.providers.HttpProvider(\n    `https://mainnet.infura.io/v3/<YOUR-API-KEY>`\n  )\n)\n// Define the minimal ABI to obtain the current finalized block number\nconst lineaRollupAbi = [\n  {\n    "constant": true,\n    "inputs": [],\n    "name": "currentL2BlockNumber",\n    "outputs": [\n      {\n        "name": "",\n        "type": "uint256"\n      }\n    ],\n    "payable": false,\n    "stateMutability": "view",\n    "type": "function"\n  }\n];\n\n// Define the contract address\nconst lineaRollupAddress = \'0xd19d4b5d358258f05d7b411e21a1460d11b0876f\';\n\n// Create a contract instance\nconst lineaRollupContract = new web3.eth.Contract(lineaRollupAbi, lineaRollupAddress);\n\n// Function to get the finalized L2 block number\nasync function getFinalizedL2BlockNumber() {\n  try {\n    const currentL2BlockNumber = await lineaRollupContract.methods.currentL2BlockNumber().call();\n    const blockNumberHex = \'0x\' + BigInt(currentL2BlockNumber).toString(16); // Convert BigInt to hex string\n\n    console.log(\'Finalized L2 Block Number:\', currentL2BlockNumber.toString()); // Print BigInt as string\n    console.log(\'Finalized L2 Block Number (Hex):\', blockNumberHex);\n\n    return { blockNumber: currentL2BlockNumber, blockNumberHex };\n  } catch (error) {\n    console.error(\'Error fetching L2 block number:\', error);\n  }\n}\n\n// Call the function\ngetFinalizedL2BlockNumber();\n'})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"In the project directory, run the script:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"node index.js\n"})}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);